《iyuV6》速成开发手册6.0

官方用户交流：
官方源码开源群：323924434
iApp技术开发群：483556574
官方1群：239547050
官方2群：103540883
官方3群：680364987
官方4群：334267540
官方5群：1018513107
官方游戏开发群：375679257



【6.0 iyuV6升级简介】
1. 出错后报错信息，显示在调试日志里。
2. 语法完整参照java语法 和 Android的api
3. 融合裕语言代码，写法和使用方式有所不同。
4. 入口文件必须为 mian.iyu 如果全部采用此语言开发，可以在入口文件加一个uigo跳转。
5. 更多不同点可以自行探索。
6. java语言相对复杂，更多教程资料可以自己百度找找。
7. 注意java的类都是需要导入完整包名的，否则会出错。可以使用 import 或 imports 进行导入包名。


【指定系统编译】

[方案一]

// 可以指定系统来编译代码

//执行 java 多行代码
java
{
  String str = "这是 iApp";
  android.util.Log.v("iapp", str);

}

//执行 java 单行代码
java android.util.Log.v("iapp", "这是 iApp");


[方案二]

// 裕语言V5 允许java 格式文件，进行混编交互。

// 创建 *.java 文件 并且完全支持 android 原生开发。


【目录开头符号标识】

// 代码中需要输入一个文件的代码，填写路径的开头第一个可以使用符号进行快捷指向路径

// 路径开头为 % 硬盘分区根路径

// 路径开头为 @ 包内资源路径

// 路径开头为 $ 应用安装位置路径



【类模块对象的创建】

// myu 类模块需要先创建对象
cj 或  iapp.cj

// 创建 abc.myu 类模块的对象，同时会调用 abc.myu 类模块的构造 ff lei()
s abc = cj.abc()

// 调用类模块的变量
s b = abc.b

// 调用类模块的方法
s c = abc.c()


// 也可以用于数组对象的创建，创建一个长度为 10 的字符串数组
string[] sz = cj.string[10]


【修饰符】

// 全局；在变量或 方法前加上后可使用 文件名.方法或变量名 进行访问。
qj

// 私有；在变量或 方法前加上后，方法或变量名仅供当前文件访问。
sy

// 固定；申明 变量 并赋值后，其值不可改变。其变量可在方法内任意代码块里调用，如下
gd

// gd 例1
ff a()
{

gd s abc = "abc"

// 创建线程
gj.xc(){

gj.sc(abc)

}

}


【s 变量】
用法：

申明界面变量
//可以赋字符串
ss a = "blss"
//或 设置为空
ss a = null

//读取数据
tw(ss.a)

申明全局变量
//可以赋其他变量
sss a = "blsss"
//或 设置为空
sss a = null

//读取数据
tw(sss.a)


// 推断类型

//说明：根据首次赋值的数据来推断变量类型。推断类型 无法作为方法的申明参数变量使用。


// 字符串型（String）
s d = "nihao"
string d2 = "nihao"


// 整数型（int）
s e = 123
int e2 = 123


// 小数型（double）
s f = 123.123
double f2 = 123.123


// 是否型（boolean）
s g = shi
boolean g2 = fou
//可以这写
//s g = true
//boolean g2 = false


// 数据型（Object）
s h = kong
object h = null

//可以这写，不赋值。注意：变量默认值不为 kong
//s h
//object h


// 方法参数变量需要指向性数据类型

方法，例：

ff jyg(s bl = 0)
{
fh bl + 1
}

// 全局变量：需要写在类模块里，并且不能写在方法内，应该写在方法外；

// 1. 在 类模块 里申明的变量；可以在该类中的所有方法 或 事件方法 内使用；
s abc = 1

// 增加全局修饰符
qj s abc2 = 2


用途：
可用于与iApp支持的其他语言进行交换数据，数据共享，数据储存等。

区域介绍：
界面变量：生产界面变量后，同一个界面中的所有事件，均可对其进行操作。
全局变量：生产全局变量后，同一个应用中的所有事件，均可对其进行操作。

说明：
变量类似一个箱子，你可以把数据储存在里面，等需要的时候就取出来使用，可以改变它装你想要装的数据。语言中的变量是可以根据赋值，而且自动转换的，所以无需申明数据类型。

提示：
自定义的变量名，比如“abc、 nihao、sfw123、www_zzw”变量不允许全部为数字，不允许掺杂符号，请不要使用太长的变量名，不推荐使用中文作为变量名。

空值：
如果访问一个没有声明的变量，将返回“null”空值类型，这个不对等于字符的 'null'。
判断是否空值的例子:(这里我们不知道变量“abc”是否空值)
s abc = sss.abc
rg abc == null
{
	syso("是空值")
}

【// 或  /* */ 注释语句】
用法：

//这个是变量“a”它的值等于“1”
s a = 1
//这个是变量“b”它的值等于“2”
s b = 2

/*
大量代码注释方法
s c = 3
s d = 4

*/

说明：
注释语句符号可以用“//” 也可以用“/* */”，以注释符号开头的正行，将会被代码执行器无视。通常用于给自己标示代码的含义


【myu 类模块】
// 创建一个 abc.myu 源码文件，内容如下：

// 创建 模块变量 a并赋值
s a = "NiHao"
s aa = ""
qj s aaa = "全局变量"

// 用java申明变量
java int abc1 = 100

java public int abc5 = 200

// 用java写方法
java
{
  public void abc2(int abc22)
  {
    abc1 = abc22;
  }

  public int abc3(int abc33)
  {
    return abc1 + abc33 + 100;
  }
}

// 构造方法
ff lei(s a = "")
{
aa = a
}

// 创建方法 b
ff s b()
{
  fh a
}

// 创建方法 c
ff s c(s d = "")
{
  fh a + d + aa
}

// ----- 调用实例 -----

// 创建对象
s abc = cj.abc("hahaha")

// 输出 模块变量 aa
gj.sc(abc.aa)

// 输出 模块方法 b
gj.sc(abc.b())

// 输出 模块方法 c
gj.sc(abc.c("Ma?"))

// 输出 全局变量
gj.sc(abc.aaa)

// 调用java写的方法
java abc.abc2(123)

// 调用java写的方法
java gj.sc(abc.abc3(567))

// 获取java申明的变量
java gj.sc(abc.abc5)

【ff 方法】

// 以 ff 开头 + [可选：修饰符] + [可选：方法返回类型] + 方法名 ( 参数 [可选：强制参数类型] )
ff abc()
{
  gj.sc("这是 无返回数据，无参数 的方法")
}


// fh 为 返回数据的代码

// 返回如设置 s 将等同于Object类型
ff s abc(s a)
{
  gj.sc("这是 返回数据a + 123，参数变量a将等同于Object类型 的方法")
  fh a + 123
}

// 返回如设置 int 为整数类型
ff int abc(s a = 0)
{
  gj.sc("这是 返回数据a + 123，参数变量a预设值为整数0将 s 类型强制转换为 int 的方法")
  fh a + 123
}


// 修饰符 qj 为全局方法，其他界面 与 模块 里可以调用
// 返回如设置 int 为整数类型
qj ff int abc(int a)
{
  gj.sc("这是 返回数据a + 123，参数变量a类型为 int 的方法")
  fh a + 123
}



【数组类型】
用法：

// 申明一个字符串数组
s sz1 = { "abc", "def", "g" }
// 申明一个字符串数组
string[] sz4 = { "abc", "def", "g" }

// 获取数组长度
s cd = sz1.length

// 申明一个字符串数组
s sz2 = cj.string[3]
// 给数组赋值
sz2[0] = "abc"
sz2[1] = "def"
sz2[2] = "g"

// 读取数组内容
s a1 = sz2[0]

// 申明一个类模块数组，提前创建一个类模块 mk.myu
// 初始化模块
s mk1 = cj.mk()
s mk2 = cj.mk()
// 创建类模块数组
s sz3 = { mk1, mk2 }

// 创建类模块数组
s sz5 = cj.mk[2]
sz5[0] = mk1
sz5[1] = mk2

// 循环数组
xh s q1, sz1
{
gj.sc(q1)
}

xh s q2, sz5
{
gj.sc(q2)
}


【数组列表类型】
用法：

// 申明一个字符串的数组列表
alist<string> lb1 = cj.alist<string>()

// 申明一个类模块的数组列表，提前创建一个类模块 mk.myu
alist<mk> lb2 = cj.alist<mk>()

// 添加数据
s q2 = "abc";
lb1.add(q2)
// 指定序号位置添加数据， 序号是从0开始
lb1.add(0, "bc")

// 指定序号位置修改数据
lb1.set(0, "bcbc")

// 获取数组列表长度
s cd = lb1.size()

// 获取数据
s q1 = lb1.get(0)

// 获取是否存在数据
s cz = lb1.contains(q2)

// 获取数据在列表中的序号，从开始位置向后查找，序号是从0开始
s x1 = lb1.indexOf(q2)

// 获取数据在列表中的序号，从结束位置向前查找，序号是从0开始
s x2 = lb1.lastIndexOf(q2)

// 删除数据
lb1.remove(0)
// 删除数据 或输入数据对象
lb1.remove(q2)
// 删除所有数据
lb1.clear()

// 循环数组列表
xh s q3, lb1
{
gj.sc(q3)
}


【哈希表类型】
用法：

// 申明一个字符串的数组列表
hmap<string, string> map1 = cj.hmap<string, string>()

// 申明一个类模块的数组列表，提前创建一个类模块 mk.myu
hmap<string, mk> map2 = cj.hmap<string, mk>()

// 添加数据
s q2 = "abc";
// 指定 键名 添加或修改 数据
map1.put("a", "bcc")
map1.put("b", q2)

// 获取哈希表长度
s cd = map1.size()

// 指定 键名 获取数据
s q1 = map1.get("a")

// 获取指定 键名 是否存在
s cz = map1.containsKey("a")

// 获取指定 数据对象 是否存在
s cz2 = map1.containsValue(q2)

// 指定 键名 删除数据
map1.remove("a")

// 指定 键名 和 键值 删除数据，需要 键名 和 键值 匹配后删除
map1.remove("b", q2)

// 删除所有数据
map1.clear()

// 循环 键名
s sz2 = map1.keySet()
xh s x2, sz2
{
  gj.sc(x2)
}

// 循环 键值
s sz = map1.values()
xh s x1, sz
{
  gj.sc(x1)
}



【syso 打印】
用法：
//打印字符串
syso("wo1314")
//或
syso("wo1314")

//打印字符串，字符串拼接
syso("wo" + "ai" + "ni")
//或
syso("wo" + "ai"+ "ni")

//拼接变量打印字符串
s a = "a"
s b = null

syso("变量" + a + "等于" + b)


可以打印出数据，代码同等于 System.out.println("1314")，可以在测试时，选择 调试日志查看打印数据。

说明：
用于打印调试数据。

【rg 判断语句】
用法：

//rg 语句的使用
s a = 2

rg a > 1
{

syso("a大于1")

}

//搭配使用
s a = 2

rg a == 1
{

syso("a等于1")

}, a == 2
{

syso("a等于2")

},{

syso("a等于其他")

}


//多个rg 语句嵌套
s a = 1
s b = 2
rg a == 1
{

rg b == 2
{
syso("a等于1，b等于2")
}

},{

syso("a不等于1")

}


//逻辑运算判断

s a = 1
s b = 2
//a等于1 或者 等于2
rg a == 1 || a == 2
{

syso("a等于1")

}

//a等于1 并且 b等于2
rg a == 1 && b == 2
{

syso("a等于1，b等于2")

}


//a不等于b 此运算符检测两个值是否相等，相等返回 false，否则返回 true

rg a != b
{

syso("a不等于b")

}

支持运算符（返回 是 与 否）：
== 是否对等
!= 是否不等于
>= 是否大于或等于
<= 是否小于或等于
> 是否大于
< 是否小于
?* 字符串开头是否相同
*? 字符串结尾是否相同
? 字符串是否被包含
上面三个举例：
s a = "abcdef"
rg a ?* "abc" 返回“是”
rg a *? "def" 返回“是”
rg a ? "cde" 返回“是”

支持逻辑运算符：
|| 或者
&& 并且


【xh 循环】
用法：
// 条件: a=初始值,最大值,增长值；a初始为1，设置a最大为10，a每次循环增加1
xh s i=0,i<10,i++
{

syso("循环10/" + i)

}


// tcxh 将直接跳出循环
s a = 9
// 3个表达式的循环
xh s i=0, i<a, i++
{
  rg i>3{
    tcxh
  }
gj.sc(i)
}

// tcbcxh 将直接跳出本次循环，并继续执行后面的循环
s a = 9
// 3个表达式的循环
xh s i=0, i<a, i++
{
  rg i>3{
    tcbcxh
  }
gj.sc(i)
}

//这将循环9次，使用 a-- 让变量每次减少1
s a = 9
// 单个表达式循环
xh a > 0
{
gj.sc(a)
a--
}


//设置一个数组
string[] data = {"a","b","c","d"}
//打印数组；a是每次循环数组值
xh s a, data
{

syso(a + " 循环")

}

说明：
用于多次重复循环操作。

【yc 异常】

// 无异常日志
yc{
gj.sc("执行正常代码")

},{

gj.sc("如果发生异常，将被执行")

}

// 有异常日志
yc{
gj.sc("被执行代码")

},(e){

gj.sc("如果被执行代码发生异常，将被执行；异常日志:" + e)

}

说明：
常用于可能发生异常代码的执行，其中的代码如果发生了异常不会造成应用崩溃。


【st.*() 获取视图控件】
用法：

//如，获取文本控件对象
// 输入控件的ID
s wb = st.wb(3)
syso(wb)


s wb2 = st.wb(2)
// 获取控件的原对象 返回 TextView类型
syso(wb2.st)

// 获取文本控件的文本字符
syso(wb2.zf())


// 设置文本控件的文本字符
wb2.text("ni hao ma?")

// 其他所有控件获取方法是一样的，获取的对象 子方法可能有差别。

// 获取线性布局对象
// 输入控件的ID
s xxbj = st.xxbj(1)
syso(xxbj)


// 获取视图对象，获取的是View对象
// 获取wb1视图对象
s wb1 = st.st(3)

// 根据 xxbj1对象来获取其中的 wb2 的视图对象
s xxbj1 = st.st(1)
s wb2 = st.st(xxbj1, 2)


【t 新线程】
用法：
t()
{
syso("新线程里执行代码")
}

说明：
启用新线程，去执行一些需要执行很久的代码。比如把下载文件，获取网页源码，大量的文件操作，可以放入新线里执行。这里线程的概念，启用新的线程帮你处理代码，这样不会影响到主线程。


【设置或修改控件事件代码】
用法：
//设置控件ID3，的单击事件
wb_3.sj.dj()
{
syso("ok")
}


说明：
输入控件Id，输入事件类型，并将事件顺序填写在 { 中 }，动态控件将触发该事件代码。

事件类型：
clicki=单击事件


【tw 提示】
用法：
tw("你好")
//或
tw("你好")

//设置参数1：显示的时间长久；0：显示的时间短暂；\n为换行的意思，其他地方通用
tw("你好\n吗？", 1)
//或
tw("你好\n吗？", 1)


说明：
用于提醒用户，界面显示时长大约为 2秒钟。弹出代码中的文字，来提醒用户。


【fd 删除文件】
用法：(将删除SD卡根目录的abc.zip文件)
boolean b = fd("%abc.zip")

syso(b)

说明：
用于删除指定的文件，是否成功返回数据：true或 false


【fe 文件是否存在】
用法：(将判断SD卡根目录的abc.zip文件是否存在)
boolean b = fe("%abc.zip")

syso(b)

说明：
用于判断指定的文件存在，是否存在返回数据：true或 false


【fs 文件大小】
用法：(将获取SD卡根目录的abc.zip文件占用的大小)
s b = fs("%abc.zip")

syso(b)

说明：
用于判断指定的文件存在，是否存在返回数值单位(字节)。
转换为KB：
s b = fs("%abc.zip")
double b2 = b / 1024
syso(b2)

转换为MB：
double b2 = b / 1024 / 1024


【fr 读取文本】
用法：(将读取SD卡根目录的abc.txt文件里面的内容)
s b = fr("%abc.txt")
syso(b)

s b = fr("%abc.txt", "utf-8")
syso(b)

说明：
用于读取文本文件的数据内容。
……

【fc 复制文件】
用法：（在SD卡根目录abc.txt文件拷贝一个新的副本至abc2.txt）
boolean b = fc("%abc.txt", "%abc2.txt")
syso(b)

//设置重复不覆盖
boolean b = fc("%abc.txt", "%abc2.txt", false)
syso(b)

//将apk包内的 abc.txt 复制到SD卡上
boolean b = fc("@abc.txt", "%abc2.txt")
syso(b)

说明：
用于复制文件，创建一个新的副本文件。是否成功返回数据：true或 false
……


【fw 写入文本】
用法：(将文本数据写入至SD卡根目录的abc.txt文件里面)

s b = "我是一个txt文件的内容"
fw("%abc.txt", b)

s b = "我是一个txt文件的内容"
fw("%abc.txt", b, "utf-8")

说明：
用于写入文件。



【fl 文件列表】
用法：（获取一个目录的文件列表）
s c2 = fl("%dir")
xh s a, c2
{

syso("文件 " + a)

}


//仅获取文件夹
s c2 = fl("%.estrongs", true)
xh s a, c2
{

syso("文件 " + a)

}


//仅获取文件
s c2 = fl("%.estrongs", false)
xh s a, c2
{

syso("文件 " + a)

}

说明：上面例子是获取sd卡根目录文件夹“dir”里面的所有子目录以及文件，并获取结果返回变量“c”，并用用符合 # 获取变量c 有多少位，然后循环来读取变量“c”里面的列表数据，可以通过c[0]获取第一位，c[1]第二位数据等。

提示：
看似有些复杂，理解了就简单了， 这里的变量“c”类型是一个数组，里面包含了一个数据列表。通过循环可以顺序读取这个列表。


【ft 转移文件】
用法：（将SD卡根目录的abc.txt转移至abc3.txt）
boolean c = ft("%abc.txt", "%abc3.txt")
syso(c)

说明：
用于转移文件。是否成功返回数据：true或 false


【fdir 获取SD卡根目录路径】
用法：（获取根目录路径并赋值至变量“a”）
//获取根目录
s a = fdir()
syso(a)

//获取目录的绝对路径
s a = fdir("%dir")
syso(a)

说明：
通过获取根目录路径，就可以计算文件的绝对路径。


【fuz 解压zip部分文件】
用法：（将根目录文件abc.apk压缩包里的AndroidManifest.xml文件，解压到根目录AndroidManifest2.xml）
s d = fuz("%abc.apk", "AndroidManifest.xml", "%AndroidManifest2.xml")
syso(d)

//解压文件遇到重复不覆盖
s d = fuz("%abc.apk", "AndroidManifest.xml", "%AndroidManifest2.xml",false)
syso(d)

说明：
通过上面代码可以实现压缩包解压部分的文件，并返回赋值至变量“d”解压文件的数量。


【fuzs 解压整个zip】
用法：(将根目录文件abc.apk压缩包解压至根目录文件夹abcdir，会自动创建)

boolean c = fuzs("%abc.apk", "%abcdir")
syso(c)

//解压文件遇到重复不覆盖
boolean c = fuzs("%abc.apk", "%abcdir", false)
syso(c)

说明：
通过上面代码将解压整个压缩包至指定文件，并赋值至变量“c”，是否成功返回数据：true或 false


【fj 压缩文件或文件夹至zip】
用法：
boolean c = fj("%adc.txt", "%abc.zip")
syso(c)

//不去除根目录
boolean c = fj("%adc.txt", "%abc.zip",false)
syso(c)

说明：
压缩文件。返回赋值数据：true 或 false


【fo 打开文件】
用法：（将根目录打开安装abc.apk文件）
fo("%abc.apk")

说明：
可以调用系统工具打开不同的文件。


【sr 替换字符】
用法：
s a = "123456789"
s b = "456"
s c = "."
s d = sr(a, b, c)
//将提示：123.789
syso(d)

//支持正则表达式
//s d = sr(a, b, c, true)

说明：
用于替换字符


【sj 截取字符】
用法：
s a = "123456789"
s b = "34"
s c = "8"
s d = sj(a, b, c)
//将提示：567
syso(d)

//从头部开始截取
s d = sj(a, null, c)
syso(d)

//截取到尾部
s d = sj(a, b, null)
syso(d)

说明：
用于截取数据部分字符


【sl 数据数组】
用法：
s a = "1212121212"
s b = ""
String[] c2 = sl(a, b)

//可以支持正则表达式；例子看（注意说明）
//String[] c2 = sl(a, b, true)

xh s a, c2
{
syso(a)
}

说明：
将把变量“a”的字符串，切割成一个数组，以字符“.”为分割字符。并用循环顺序打印出数据。

注意：
如果支持正则表达式数据数组，上例子的 s b = "" 其内的值。需要转义的特殊字符 “$()*+.[]?\^{},|”

支持正则的特殊字符转义方法：
如：
s a = "12|a$12|a$12|a$12|a$12"

//关键分割字符串如果包含特殊字符，需要在每个特殊字符前面增加“\\”进行转义
s b = "\\|a\\$"
String[] c2 = sl(a, b, true)
xh s a, c2
{
syso(a)
}


【siof 获取字符位置】
用法：
s a = "123456789"
s b = "3"
s c = 0
s d = siof(a, b, c)
//将提示：2
syso(d)

s a = "123456789"
s b = "3"
s d = siof(a, b)
//将提示：2
syso(d)

说明：
从前面向后面进行匹配。字符位置以0计算，若无数据找到将返回 -1


【slof 获取字符位置】
用法：
s a = "123456789"
s b = "4"
s c = 8
s d = slof(a, b, c)
//将提示：3
syso(d)

s a = "123456789"
s b = "4"
s c = slof(a, b)
//将提示：3
syso(c)

说明：
从后面向前面进行匹配。字符位置以0计算，若无数据找到将返回 -1


【ssg 截取字符】
用法：
s a = "abcdefghijk"
s b = ssg(a, 2, 6)
//将提示：cdef
syso(b)

s a = "abcdefghijk"
s b = ssg(a, 6)
//将提示：ghijk
syso(b)

说明：
根据字符的位置进行截取字符，若失败将变量“b”赋值 null


【slg 获取字符长度】
用法：
s a = "123456789"
s b = slg(a)
//将提示：9
syso(b)

说明：
顾名思义。


【strim 去除头尾空格】
用法：
s a = "   123456789 "
s b = strim(a)
//将提示:123456789
syso(b)

说明：
常用于去除后进行判断头尾字符。

【slower 转换为小写】
用法：
s a = "AiufSUscN"
s b = slower(a)
//将提示:aiufsuscn
syso(b)

说明：
常用于转换为小写后进行判断。

【supper 转换为大写】
用法：
s a = "AiufSUscN"
s b = supper(a)
//将提示:AIUFSUSCN
syso(b)

说明：
常用于转换为大写后进行判断。


【stop 暂停代码】
用法：
t()
{

syso("1")
stop(1000)
syso("2")
stop(1000)
syso("3")
stop(1000)
syso("4")

}

说明：
每次执行 stop(1000) 将暂停1秒后，再执行下面代码。单位为毫秒：1000毫秒 = 1秒


【sran 生产范围随机数】
用法：（生产一个 100 至 1000的随机数）
s a = sran(100, 1000)
syso(a)

说明：
有时候需要利用到随机机制，可以利用这个来开发！


【hs 获取网页源码】
用法：
t()
{
s a = "https://m.baidu.com/"
s b = hs(a)
syso(b)

}

2，提交post数据:
输入说明：地址，post数据提交，目标网页编码
t()
{

s a = "https://m.baidu.com/"
s b = hs(a, "title=你好&text=你好吗？", "utf-8")
syso(b)

}

3，带自定义cookie方式获取网页:
//传递cookie项值，格式为nama=value 下例： uid=112name=nihaosb=123456789
t()
{

s a = "https://m.baidu.com/"
s b = hs(a, "title=你好&text=你好吗？", "utf-8", "uid=112name=nihaosb=123456789")
syso(b)

}

4，带自动设置cookie方式获取网页，并记录当前网页的Cookie:
//传递cookie项值，当自定义为null 系统将自动设置已记录的cookie
t()
{

s a = "https://m.baidu.com/"
s b = hs(a, "title=你好&text=你好吗？", "utf-8", null, true)
syso(b)

}

5，带自动设置cookie方式获取网页，并记录当前网页的Cookie，并设置Header头:（可设置多条，以“||”隔开）文件头包括了Cookie，User-Agent设备型号。
//传递cookie项值，当自定义为null 系统将自动设置已记录的cookie
t()
{

s a = "https://m.baidu.com/"
s b = hs(a, "title=你好&text=你好吗？", "utf-8", null, true, "User-Agent=Mozilla/5.0 (iPad U CPU OS 6_0 like Mac OS X zh-CN iPad2)||accept=*/*||accept-language=zh-CN")
syso(b)

}

6，带自动设置cookie方式获取网页，并记录当前网页的Cookie，并设置Header头:（可设置多条，以“||”隔开）文件头包括了Cookie，User-Agent设备型号，设置连接超时，设置接收超时，设置代理IP。
//传递cookie项值，当自定义为null 系统将自动设置已记录的cookie
t()
{

s a = "https://m.baidu.com/"
s b = hs(a, "title=你好&text=你好吗？", "utf-8", null, true, "User-Agent=Mozilla/5.0 (iPad U CPU OS 6_0 like Mac OS X zh-CN iPad2)||accept=*/*||accept-language=zh-CN", 20000, 20000, "10.0.0.172:80")
syso(b)

}

7，应用系统存储Cookie的浏览查看，返回赋值变量为字符串
s b = hs("cookie")

8，应用系统存储Cookie的清空，无赋值变量
hs("del cookie")

说明：
这里先开了一个线程，然后在线程里执行获取网页源码的工作，开线程是担心有些主线程界面。大部分网页都需要使用cookie登陆，可使用工具查询所需cookie然后进行操作。
设置cookie有说明作用？
1.登陆用户名
2.获取验证码图片并发送验证码
....


【hd 下载文件】
用法：（下载文件至SD卡根目录 abc.apk）

1，下载文件，默认不覆盖重复
t()
{

s a = "http://abc.com/abc.apk"
s b = "abc.apk"
s c = hd(a, b)
syso(c)

}

2，设置重复是否覆盖
t()
{

s a = "http://abc.com/abc.apk"
s b = "abc.apk"
s c = hd(a, b, true)
syso(c)

}


3，带自动设置cookie方式下载网页形式文件（如图片形式验证码，论坛的附件等），支持post数据，自定义Cookie或系统设置Cookie，并记录当前网页的Cookie，并设置重复是否覆盖。可参考hs获取网页，并设置Header头:（可设置多条，以“||”隔开，也可留空为null）
输入说明：下载地址，保存文件位置，是否重复覆盖，post数据提交，目标网页编码，自定义Cookie，是否系统自动设置Cookie，设置Header头
t()
{

s a = "http://abc.com/abc.apk"
s b = "abc.apk"
s c = hd(a, b, true, "title=你好&text=你好吗？", "utf-8", null, true, null)
syso(b)

}

说明：
开个线程，然后在里面下载一个文件。并存到SD卡。下载结果将赋值到变量“c”
返回的赋值：
1 文件已经存在
0 下载成功
-1 下载失败


【hw 访问网页】
用法：
s a = "https://m.baidu.com/"
hw(a)

说明：
使用内置浏览器访问网页。
可用于下载文件：
s a = "http://abc.com/abc.apk"
hw(a)


//跳转访问网页，并且自定义标题栏颜色
//主体颜色
s b = "#387bd6"
//底部横杠颜色
s c = "#255eab"
hw("https://m.baidu.com/", b, c)

【hws 系统浏览器访问网页】
用法：
s a = "https://m.baidu.com/"
hws(a)

说明：
使用内置浏览器访问网页。
可用于下载文件：
s a = "http://abc.com/abc.apk"
hws(a)


【ug 获取控件属性】
用法：(1为：控件ID，第二个参数为控件属性标识，然后赋值到变量)
s a = ug(1, "text")
syso(a)

说明：
输入属性标示来返回不同的控件数据。注意：有些控件没有指定属性，将返回null。下面有属性介绍，可参考。

可用属性标识：
text=内容、background=背景、width=宽度、height=高度、x=X轴、y=Y轴、paddingleft=左内边距、paddingtop=顶内边距、paddingright右内边距、paddingbottom=底内边距、layout_marginleft=左外边距、layout_margintop=顶外边距、layout_marginright=右外边距、layout_marginbottom=底外边距、
hint=提示字符、imeoptions=虚拟键盘按键状态、visibility=控件可视状态、checked=选项是否被选中、title=浏览器网页标题、url=浏览器网址、lastvisibleposition=列表滑动到项目位置的序号、count=列表项目总数、
selecteditem=获取下拉框选值、rating=评分当前数值、progress=控件当前进度数值、date=日期控件选值、time=时间控件选值、currentitem=获得滑动窗体界面序号、isdraweropen=侧滑是否界面展开状态、selectionstart=获取文本框光标开始位置、selectionend=获取文本框光标结束位置、
cangoback=是否存在可返回的网页、cangoforward=是否存在可前进的网页、collapsecolumns=表格布局获取指定列是否折叠、shrinkcolumns=表格布局获取指定的列是否可收缩、stretchcolumns=表格布局获取指定的列是否可拉伸、shrinkcolumnsall=表格布局获取指示是否所有的列都是可收缩的、
stretchcolumnsall=表格布局获取指示是否所有的列都是可拉伸的



【us 设置控件属性】
用法：(1为：控件ID，第二个参数为控件属性标识，第三个是需要设置的数据或变量)

//设置文本控件内容
s c = "文本内容"
boolean f = us(1, "text", c)
syso(f)


//设置浏览器的连接url
s c = "https://m.baidu.com/"
boolean f = us(2, "url", c)
//提示：如果浏览器正在播放视频或音乐，直接关闭浏览器可能还会有声音，建议关闭浏览器时先跳转成另一个网页。
//提示：如果需要加载本地的文件，可以 us(2, "url", "file:///android_asset/res/web.html") 加载安装包内assets/res/web.html文件
syso(f)


//设置浏览器显示的html文件或文本
s c = "<html><p>html内容</></html>"
s d = "utf-8"
s e = "text/html"
boolean f = us(2, "url", c, d, e)
syso(f)


//设置控件阴影（部分控件有效果如文本、文本框、按钮）
s radius = 5
s dx = 0
s dy = 0
s color = "#000000"
boolean f = us(2, "shadow", radius, dx, dy, color)
syso(f)


//带有赋值变量，将返回数据是否设置成功 true 或 false
s c = "文本内容"
us(1, "text", c)

//设置文本框控件光标
us(1, "selection", 1)

//选中文本框部分内容
us(1, "selection", 1, 3)

//浏览器前进1个网页
us(1, "gobackorforward", 1)

//浏览器后退1个网页
us(1, "gobackorforward", -1)

//设置控件点击波纹效果颜色；需系统5.0以及以上才有效果；部分控件还需要设置 clickable=true 才有效果。
us(1, "backgroundripple", "#888888")

//设置编辑框光标颜色
us(1, "textcursordrawable", "#000000")

说明：
输入控件标示设置控件数据。【可参照控件属性，所有属性标识通用】

更多属性标识：
currentitem=设置滑动窗体界面序号、closedrawer=关闭指定侧滑、opendrawer=展开指定侧滑、drawerlockmode=设置手势滑动、selection=设置文本框光标位置、gobackorforward=浏览器的前进或推后、backgroundripple=波纹效果、dh=执行动画（非队列动画）


【uigo 跳转界面】
用法：（输入界面文件名，跳转指定的界面）
uigo("abc.iyu")

// 或
uigo(abc.iyu)

//带参数的跳转
uigo("abc.iyu", 536870912)


说明：
可以界面之间的转换，扩展新的界面。

参数：
67108864：如果在内存中发现存在该界面，则清空这个界面之上的所有其他界面，使其处于栈顶。
268435456：系统会寻找或创建一个新的内存来放置该界面
1073741824：跳转到的界面，不排在内存中
536870912：当内存中存在该界面并且位手机的显示状态时，不再创建一个新的，直接利用这个界面。


【utw 弹出界面】
用法：（在原有的界面弹出界面）
s a = null
s b = "界面标题"
s c = "界面内容"
s d = "退出"
s e = "保存"
s f = "取消"

//三个按钮
//输入图标，输入标题，输入内容，输入按钮名称，输入按钮名称，输入按钮名称，输入是否点击弹窗以外界面是否关闭弹窗
utw(a, b, c, d, e, f, false)
{
syso("点击了确定")
},{
syso("点击了保存")
},{
syso("点击了取消")
}

//两个按钮
utw(a, b, c, d, e, false)
{
syso("点击了确定")
},{

syso("点击了取消")
}

// 一个按钮
utw(a, b, c, d, false)
{
   syso("点击了确定")
}


//没有按钮
utw(a, b, c, false)

//将界面添加到弹窗界面上，直接将界面内容设为一个界面文件
s a = "界面标题"
s b = "a.iyu"
// 或
//s b = a.iyu
s c = "取消"

//返回界面对象，设置为全局变量 v
gd s v = utw(null, a, b, c, false)
{

syso("点击了取消")

syso(v)
}


说明：
常用于询问用户当前的操作，弹窗展示内容。

赋值变量说明：
弹出界面需要赋值到一个变量，用于自定义界面弹窗的操作。


【endutw 关闭弹出界面】
用法：
endutw()

说明：
用于关闭当前打开的弹窗界面

【end 结束界面】
用法：
end()

说明：
调用后，将结束当前的界面。 并返回原来的界面。如果原来没有界面，将退出应用。

【ends 显示桌面】
用法：
ends()

说明：
跳转到手机的桌面，程序将后台运行。


【bfm 播放音频】
用法：
s a = "http://www.abc.com/abc.mp3"
android.media.MediaPlayer b = bfm(a)

s a = "%abc.mp3"
android.media.MediaPlayer b = bfm(a)
// 播放
// bfms(b, "st")
// 暂停
// bfms(b, "pe")
// 停止
// bfms(b, "sp")
// 结束播放组件
// bfms(b, "re")
// 是否在播放
// bfms(b, "ip", c)
// tw(c)

// 获取音频时长（毫秒）
// bfms(b, "dn", c)
// tw(c)
// 获取当前播放时长（毫秒）
// bfms(b, "cn", c)
// tw(c)

// 指定播放的位置（毫秒）
// bfms(b, "seekto", 2000)

// 设置音量（0-100）
// bfms(b, "volume", 100, 100)

// 一直循环播放
// bfms(b, "sl", true)

说明：
可以直接访问安装包里面的音频文件，也可以访问sd卡上的。
……

【html 标签支持】
用法：
s a = "(html)<a href="https://m.baidu.com">百度</a>"
us(1, "text", a)

说明：
text属性：设置支持html代码！


【ula 列表操作内容】
用法：
//输入数据列表对象，输入数据项...不限制数量。
s a = null
s b = {1,2,3}
s c = {"abc","bac","bbc"}
a = ula(a, b, c)

//刷新列表显示内容，常用增加数据后的刷新。
ula(a)

//清空列表对象
ula(a, null)
//ula(a, "clear")

//获得列表对象，赋值返回v变量为列表对象
s v = ula(a, "list")

说明：
根据数据列表，进行增加数据。

提示：
1 abc，其中1为控件id，abc为设置控件值
其中所谓的控件，为a.iyu界面中的控件。
增加标识数据，不作为设置控件数据，可在标识处设负数。如下：
-1 abc

提示：
如果需要设置 单选控件、多选控件 的选择状态，可设值为 true 或 false

注意：
将要执行事件的控件，必须在此设置值。如你有一个按钮控件无需设置值，但需要使用事件，可设置 1=null
不设置值的控件，将无法获取列表内容数据。

【uls 列表显示内容】
用法：
//
s a = null
s b = {1,2,3}
s c = {"abc","bac","bbc"}
s b2 = {1,2,3}
s c2 = {"cde","cdw","cad"}
a = ula(a, b, c)
a = ula(a, b2, c2)
s c = "a.iyu"
或
//s c = a.iyu
s d = -1
s e = -2
//输入控件id或控件对象，输入数据列表，输入列表项界面文件名，输入界面宽度，输入界面高度
uls(1, a, c, d, e)

//设置下拉选择列表
//输入控件id或控件对象，输入数据列表或数组数据
s c = {"abc","bac","bbc"}
uls(1, c)

说明：
设置列表控件、视图控件、下拉列表的数据。

注意：
列表控件、视图控件 设置的界面 a.iyu 其中的载入事件是允许被调用。
可以通过列表控件、视图控件 设置的界面 a.iyu 的载入事件，进行每项列表布局的个性化设计。
每当显示到每项列表内容就会调用一次此载入事件，并且将该项的布局控件赋值给 st_vW 变量对象，
然后可以通过  gvs(st_vW, "a.2") 获取其中的子控件对象，然后进行操作子控件即可。
还可以通过 st_pN 获取当前的视图中的序号，方便判断目前操作的是那一个视图。


【ulag 获取列表内容数据】
用法：

//输入当前的控件对象，输入获取控件ID 1的数据参数
s b = ulag(a, 1)

//输入当前的控件对象，输入获取标识为 -1的数据参数
s b = ulag(a, -1)

//通过 数据列表对象 或 列表控件对象 获取数据
//输入数据列表对象 或 列表控件对象，输入视图中的位置序号，输入获取标识为 -1的数据参数
s b = ulag(a, 1, -1)


说明：
常用与在列表控件的事件中，获取参数数据与用户进行互动。获取失败将赋值变量为 null

注意：
使用此方法在uls中设置控件参数后，有设置参数的控件，在事件中可使用此方法。

【ulas 更新列表内容数据】
用法：

//输入当前的控件对象，输入获取控件ID 1的数据参数
s b = ulas(a, 1)

//输入当前的控件对象，输入获取标识为 -1的数据参数
s b = ulas(a, -1)

//通过 数据列表对象 或 列表控件对象 获取数据
//输入数据列表对象 或 列表控件对象，输入视图中的位置序号，输入获取标识为 -1的数据参数，输入新的数据
s b = ulas(a, 1, -1)

//刷新列表显示内容，常用增加数据后的刷新。
ula(a)

说明：
常用与更新修改列表内容数据。修改数据后，别忘记刷新列表。

【usms 发送短信】
用法：
s a = "10086"
s b = "0"
usms(a, b)

注意:测试时只显示syso日志，不直接 发送短信，打包即可。

【ucall 拨打电话】
用法：
s a = "10086"
ucall(a)

注意:测试时只显示syso日志，不直接 拨出号码，打包即可。

【time 当前时间】
用法：
s a = "0"
s b = time(a)
syso(b)

说明：
第一个参数为时间类型，第二个赋值变量

[数字类型]
0：2014-07-07 09:10:08
1：2014/07/07 09:10:08
2：2014-07-07
3：09:10:08
4：18144133553151
5：2014年07月07日 09:10:08
[字符类型，输入字符形式需引号概括]
Y 年
m 月
d 日
H 时
M 分
S 秒
a/A 星期几


【fi 判断路径是否文件夹】
用法：
s a = "abc"
boolean b = fi(a)
syso(b)

说明：
指定路径，判断是否为目录文件夹，返回：true 或 false


【swh 获取屏幕分辨率】
用法：
s a = "w"
//获取屏幕宽度的dp
s w = swh(a)

s a = "h"
//获取屏幕高度的dp
s h = swh(a)

s a = "hh"
//获取屏幕真实高度的dp
s w = swh(a)

s a = "pxw"
//获取屏幕宽度的px像素
s w = swh(a)

s a = "pxh"
//获取屏幕高度的px像素
s h = swh(a)

s a = "pxhh"
//获取屏幕真实高度的px像素
s hh = swh(a)

s a = "pxztl"
//获取屏幕状态栏高度的px像素
s h = swh(a)

s a = "pxbvk"
//获取屏幕底部虚拟键盘的高度的px像素
s h = swh(a)

说明：
常用于获取屏幕的大小。

真实高度：不去除其他系统界面所占用（如状态栏）



【stobm 汉字转换编码字符】
用法：（你 转换 %E4%BD%A0）
s b = stobm("你", "utf-8")
tw(b)

说明：
有些时候网络操作的时候，网址需要带有字符参数，就可以把这个汉字转换下。

【sutf8to 将UTF-8编码字符转换中文】
s b = sutf8to("%E4%BD%A0")
tw(b)

【uycl 隐藏状态栏】
用法：
//隐藏
uycl(true)
//不隐藏
uycl(false)

说明：
隐藏手机顶部的状态栏

【uycl 修改状态栏颜色】
用法：
//输入更变颜色，并且保留状态栏空间
uycl("#50c4e5", true)

//输入更变颜色，并且不保留状态栏空间
uycl("#50c4e5", false)

//输入更变颜色，并且保留状态栏空间，只设置状态栏，不设置软键盘
uycl("#50c4e5", true, 0)

//输入更变颜色，并且保留状态栏空间，只设置软键盘，不设置状态栏
uycl("#50c4e5", true, 1)

说明：
常用与设置一体化颜色，以及更变不同的状态栏颜色。

注意：
仅系统android 4.4以及以上才有效果，系统android 5.0以及以上效果更佳！
android 4.4以下的系统，无效果！

【ushsp 设置横屏或竖屏】
用法：
//横屏
ushsp(true)
//竖屏
ushsp(false)

说明：
设置屏幕的显示方式，注意的是设置后载入事件将重新执行


【bfv 播放视频】
用法：(播放SD卡上的视频文件)
s a = "%abcd.mp4"
bfv(a)

//并且横屏
s a = "%abcd.mp4"
boolean b = true
bfv(a, b)


//并且横屏
s a = "http://m.baidu.com/abcd.mp4"
boolean b = true
bfv(a, b)
说明：
此方法将全屏播放SD卡上的视频文件。调用自带的播放器。

注意：
不支持加载assets文件。支持SD卡文件、应用私有文件、（http）远程网络文件！

支持格式：
3gp、MP4、avi


【ftz 发送通知栏】
用法：
ftz("提醒标题", "标题", "内容", null, [[
tw("点击了")
]])

//设置显示图标
ftz("提醒标题", "标题", "内容", "%abc.png", [[
tw("点击了")
]])

说明：
可以用于通知用户。


【uapp 打开App应用或游戏】
用法：
boolean c = uapp("com.iapp")

//或 带有指定类名的启动
boolean c = uapp("com.iapp", "com.yougaile.MakeiApp.logoActivity")

说明：
输入应用包名，赋值变量； 赋值变量返回启动结果：true 或 false

【uapplist 获取App列表】
用法：
Object[] b = uapplist(true)
s c = b[1]
syso(c[0])

说明：
输入 是否包括获取系统App，返回一个列表数组 至变量 “b”，每列数据将存储一个应用的信息，并且以数组方式储存。

其中列数组内容序列：
0应用包名，1启动类，2应用标题，3应用版本


【uapplistgo 获取正在运行的App列表】
用法：
Object[] b = uapplistgo()
syso(b[0])

说明：
输入 返回一个列表数组 至变量 “b”，每列数据将存储一个应用的信息，并且以 “\n”隔开。

其中列内容格式：
应用包名，pid, uid

【uninapp 卸载应用】
用法：
uninapp("com.iapp")

说明：
输入应用包名


【huf 上传文件】
用法：
t()
{
s a = "http://abc.com/upfile.php"
s b = "filename=iApp我的应用.apk&test=一款非常好的应用哦"
s c = "%abc/iApp.apk"
// 支持多文件上传
//s c = "%abc/iApp.apk|%abc/iApp2.apk|%abc/iApp3.apk"
s d = "utf-8"
s e = huf(a, b, c, d)
syso(e)

}

2.设置 header文件头，文件头包括了Cookie，User-Agent设备型号。。
t()
{

s a = "http://abc.com/upfile.php"
s b = "filename=iApp我的应用.apk&test=一款非常好的应用哦"
s c = "%abc/iApp.apk"
// 支持多文件上传
//s c = "%abc/iApp.apk|%abc/iApp2.apk|%abc/iApp3.apk"
s d = "utf-8"
s e = "User-Agent=Mozilla/5.0 (iPad U CPU OS 6_0 like Mac OS X zh-CN iPad2)||Cookie=aa:123bb:456||accept-language=zh-CN"
s f = huf(a, b, c, d, e)
syso(f)

}

说明：
输入 http接口，表单内容，手机内存选择文件，接口的网页编码， 赋值变量。 返回网页内容将赋值给变量 “e”


【nvw 创建动态控件】
用法：
//将控件添加至指定的控件作为子控件
//输入要添加的控件ID或控件对象，输入添加至指定控件ID或控件对象
nvw(id, did)

//输入要添加的控件ID或控件对象，输入添加至指定控件ID或控件对象，输入插入指定序号
nvw(id, did, 0)

//创建文本控件
//输入控件ID，输入添加至指定控件ID或控件对象（若不添加则输入null），输入控件类型，输入控件属性
s id = 123456
s did = 1

s xxbj = st.xxbj(did)
s wb = st.wb()
wb.id(id)
wb.width(-2)
wb.height(-2)
wb.text("内容")
xxbj.add(wb)

说明：
输入创建的控件ID，输入将新控件添加至指定控件ID或控件对象，创建控件的类型，创建控件的属性


【uall 获取子控件】
用法：
//输入控件ID或控件对象，输入false时将赋值子控件ID，输入赋值变量将返回一个数据列表
Object[] a = uall(1, false)

//输入控件ID或控件对象，输入true时将赋值子控件对象，输入赋值变量将返回一个数据列表
Object[] a = uall(1, true)

tw(a[0])

说明：
获取一个包含子控件的，控件中所有的子控件。

【urvw 移除控件】
用法：
urvw(3)

说明：
输入需要移除的控件ID或控件对象


【sbp 图像分割】
用法：
//载入一个图像变量，并赋值到图像变量“b”
Bitmap b = sbp("%1.png")

//载入一个用户图标，{裁剪图像区域（像素）：x坐标:80，y坐标:90，裁剪宽度:50，裁剪高度:60}
//并将裁剪好的赋值到图像变量“b”
Bitmap b = sbp("%1.png", 80, 90, 50, 60)

//载入一个SD卡上的图标，{裁剪图像区域（像素）：x坐标:80，y坐标:90，裁剪宽度:50，裁剪高度:60}，图像旋转图像:180度
//并将裁剪好的赋值到图像变量“b”
Bitmap b = sbp("%1.png", 80, 90, 50, 60, 180)

说明：
三种方式载入图像，从图像变量，从用户图标，从SD上图标；并可设置裁剪图片；可设置图像旋转； 并赋值到新的图像变量；


【bfs 保存图像】
用法：
bfs(b, "%1.jpg")

//或 压缩比例（1至100）
bfs(b, 70, "%1.jpg")

说明：
输入图像变量，输入压缩比例（1至100），输入保存图像的路径，图像将保存至该路径。


【sdeg 启动调试模式】
用法：
sdeg(0)
sdeg(1)
sdeg(2)

说明：
提示日志方式。0打包后没有任何提示，1打包后可任然打印错误，2打包后记录日志保存至文件 iApp/Log


【tot 获取控件图标】
用法：
s id = 4
Bitmap b = tot(id)

说明：
输入控件ID或控件对象，返回将赋值“b”图像变量。注：此方法仅限于 图片控件，图标按钮控件。


【tzz 图像旋转】
用法：
Bitmap a = sbp("%1.png")
s b = 90
Bitmap c = tzz(a, b)

说明：
输入被旋转图像变量，输入旋转度数（逆向旋转数为负数），返回将赋值“c”图像变量。


【tsf 图像缩放】
用法：
Bitmap a = sbp("%1.png")

//按照倍增缩放，值小于则为缩小，否则为放大
s b = 2
Bitmap c = tsf(a, b)

//指定高度与宽度缩放
s w = 100
s h = 200
Bitmap c = tsf(a, w, h)

说明：
输入被缩放图像变量，输入缩放倍数 或 指定图像高度与宽度缩放，返回将赋值“c”图像变量。


【tfz 图像反转】
用法：
Bitmap a = sbp("%1.png")
//水平反转
s b = "x"
Bitmap c = tfz(a, b)

//垂直反转
s b = "y"
Bitmap c = tfz(a, b, c)

说明：
输入被反转图像变量，输入反转方式 x为水平 y为垂直，返回将赋值“c”图像变量。

【tcc 获取图像变量尺寸】
用法：
Bitmap a = sbp("%1.png")
s b = "w"
Bitmap c = tcc(a, b)
syso(c)

s b = "h"
Bitmap c = tcc(a, b)
syso(c)

说明：
获取图像变量的 w宽度 和 h高度。

【sxb 写入剪切板】
用法：
s a = "nihao"
sxb(a)

说明：
可用于复制到剪切板，其他应用可获取到此数据。

【shb 获取剪切板】
用法：
s a = shb()
syso(a)

说明：
可获取剪切板数据，得到其他地方写入的剪切板数据。

【usjxm 手机休眠】
用法：
usjxm(false)

说明：
设置后手机将不休眠，不锁屏。默认为 true 需要休眠。


【bfvs 播放视频】
用法：

//设置SD卡视频文件
//输入控件ID或对象，输入视频文件路径
bfvs(1, "%a.mp4")

//设置网络远程视频文件
bfvs(1, "http://abc.com/a.mp4")

//增加控制器，c为赋值变量
s c = bfvss(1, "media")
//开始播放
bfvss(1, "st")

说明：
自定义视频播放控件进行播放视频。

注意：
不支持加载assets文件。支持SD卡文件、（http）远程网络文件！

支持格式：
3gp、MP4、avi

【bfvss 播放视频控制】
用法：
//开始播放
bfvss(1, "st")

//暂停播放
bfvss(1, "pe")

//停止播放
bfvss(1, "sp")

//定位到指定帧
bfvss(1, "seekto", 300)

//增加控制器，c为赋值变量
s c = bfvss(1, "media")

//是否在播放
s c = bfvss(1, "ip")
tw(c)

//获取视频时长（毫秒）
s c = bfvss(1, "dn")
tw(c)

//获取当前播放时长（毫秒）
s c = bfvss(1, "cn")
tw(c)

【addv 加载界面】
用法：
//界面中载入其他界面
s id = 1
addv(id, "a.iyu")
addv(id, "b.iyu")
// 或
addv(id, b.iyu)

//侧滑窗体
s id = 1
addv(id, "a.iyu|b.iyu")

// 或
s sz = { a.iyu, b.iyu }
addv(id, sz)

//滑动窗体，将带有赋值变量。此处变量“b”赋值为根控件列表，先通过 gslist 访问指定序号的根控件。通过 gvs 指定的根控件访问指定ID的控件。
s id = 1
s b = addv(id, "a.iyu|b.iyu")

说明：
输入控件ID，输入界面名，输入辅助参数。可用将一个界面的控件，载入到指定控件作为子控件。

如何设置或获取属性上例 a.iyu 中的控件呢？
通过文件名作为对象，进行访问，如：

//注意：此对象的使用方式。
s b = ug("a.2", "text")
us("a.3", "text", "你好")

注意：
如果载入事件中使用 addv 滑动窗体进行绑定， 如果还需要给滑动窗体内的界面中的控件设置数据，需要将设置控件的代码写在 载入完毕事件 中。否将将可能设置数据失败。

注意：
若增加 侧滑窗体 与 滑动窗体 的子控件，需要在被载入的界面设计中，自设一个根目录，作为界面唯一根目录。


【gvs 获取控件对象】
用法：
//根据当前界面，来获取控件
//输入要获取的控件ID，输入赋值变量
android.view.View c = gvs(1)

//根据控件对象，来获取内部的子控件
//输入控件ID或控件对象，输入要获取的控件ID，输入赋值变量
android.view.View c = gvs(1, 2)

说明：
常用与于利用根控件获取内部的子控件 或 获取控件对象。获取失败将赋值返回 null


【nuibs 背景选择器】
用法：
//使用颜色作为背景
s pressed = "#333333"
s selected = "#333333"
s normal = "#888888"
s b = nuibs(pressed, selected, normal)


//使用图像作为背景
s pressed = "%a.png"
s selected = "%a.png"
s normal = "%b.png"
s b = nuibs(pressed, selected, normal)


//使用渐变颜色作为背景
.配置选中状态背景
s a = 0
s b = 0
s c = "#255779|#3e7492|#a6c0cd"
s d = "0"
s e = "topbottom"
s pressed = ngde(a, b, c, d, e)

.配置正常状态背景
s a = 0
s b = 0
s c = "#255779|#3e7492|#a6c0cd"
s d = "0"
s e = "rightleft"
s normal = ngde(a, b, c, d, e)

s selected = pressed

s b = nuibs(pressed, selected, normal)

说明：
输入按下背景，输入选中背景，正常状态背景。


【ngde 背景调控器】
用法：
//输入圆角半径，输入背景填充色，输入赋值变量
s a = 15
s b = "#888888"
s c = ngde(a, b)

//输入边框宽度，输入背景填充色，输入边框颜色，输入赋值变量
s a = 5
s b = "#888888"
s c = "#333333"
s d = ngde(a, b, c)

//输入边框宽度，输入圆角半径，输入背景填充色，输入边框颜色，输入赋值变量
s a = 5
s b = 15
s c = "#888888"
s d = "#333333"
s e = ngde(a, b, c, d)

//颜色渐变。输入边框宽度，输入圆角半径，输入背景填充渐变色组，输入边框颜色，输入颜色渐变方向，输入赋值变量
s a = 5
s b = 15
s c = "#255779|#3e7492|#a6c0cd"
s d = "#333333"
s e = "topbottom"
s f = ngde(a, b, c, d, e)

说明：
背景空调生成的赋值变量，可配合背景选择器进行应用。

注意：
ngde 代码将赋值返回一个背景对象，此背景对象如果被多个不同大小的控件引用为背景。因为控件的大小不同，会导致此背景对象大小被修改。从而影响其他引用者控件。

提示：
边框与圆角半径 若不想调整，可设值为0 。适用于颜色渐变，不需要调节圆角半径和边框。

颜色渐变方向说明：
	topbottom：绘制从顶部梯度至底部
	trbl：借鉴右上角渐变左下角
	rightleft：绘制从右侧的梯度向左
	brtl：借鉴右下角渐变左上角
	bottomtop：绘制从底部梯度顶端
	bltr：借鉴渐变左下角到右上角
	leftright：绘制从左侧的梯度向右
	TL_BR：从绘制渐变的左上角到右下角

【sit 目标的设置】
用法：
//如，分享软件
//输入对象，输入属性标识，输入属性值
android.content.Intent a = null
a = sit(a, "action", "android.intent.action.SEND")
a = sit(a, "type", "text/plain")
a = sit(a, "extra", "android.intent.extra.SUBJECT", "共享软件")
a = sit(a, "extra", "android.intent.extra.TEXT", "共享内容文本")
a = sit(a, "flags", 268435456)
uit(a, "chooser", "标题")

说明：
常用于调用系统程序以及功能 或 第三方程序功能。

可属性标识：action、type、extra、flags、data、classname、component

【uit 目标的执行】
用法：
//输入目标对象，输入属性，输入属性值
uit(a, "chooser", "标题")

//输入目标对象，输入属性，输入请求数值
uit(a, "result", 1)

//输入目标对象
uit(a)

说明：
常用于调用系统程序以及功能 或 第三方程序功能。

属性支持：chooser、result

【git 目标获取参数】
用法：
//输入目标对象，输入属性标识
s c = git(a, "action")
s c = git(a, "type")
s c = git(a, "extra", "title")
s c = git(a, "flags")

说明：
获取目标的属性。

【zdp  dip转换px】
用法：
s dp = 10
//输入dp数值
s c = zdp(dp)

说明：
用于常用数据转换。

【zpd  px转换dip】
用法：
s px = 10
//输入px数值，输入赋值变量
s c = zpd(px)

说明：
用于常用数据转换。

【zps  px转换sp】
用法：
s px = 10
//输入px数值，输入赋值变量
s c = zps(px)

说明：
用于常用数据转换。

【zsp  sp转换px】
用法：
s sp = 10
//输入sp数值，输入赋值变量
s c = zsp(sp)

说明：
用于常用数据转换。

【sjxx 获取设备信息】
用法：
Object[] a = sjxx()
syso(a[0])

说明：
获取手机基本信息，将返回一个数组到赋值变量“a”，数组格式如下：

数据格式：（真实数据 \n 旁边将不没有空格）

CPU型号 \n CPU频率
屏幕宽度 \n 屏幕高度 \n 分辨率宽度 \n 分辨率高度
手机型号 \n 手机品牌 \n 手机SDK

【simsi 获取设备imsi】
用法：
s a = simsi()
syso(a)

说明：
常用于识别用户的手段。

【simei 获取设备imei】
用法：
s a = simei()
syso(a)

说明：
常用于识别用户的手段。

【endkeyboard 强制隐藏虚拟键盘】
用法：
endkeyboard()

说明：
常用于需要隐藏安卓弹出的虚拟键盘。


【hdfl 文件下载器】
用法：
//两个参数的方法设置
s savedir = "%SaveDir"
//输入下载保存目录，输入赋值变量返回一个下载器对象
s a = hdfl(savedir)(st_drD,st_drI,st_ot){
//每当下载完一个执行
//系统赋值 st_drD 文件下载项的序号
//系统赋值 st_drI 文件下载项的状态

//获取下载的URL
s b1 = ulag(a, st_drD, "url")
syso(b1)

//获取自定义整数标识
s b2 = ulag(a, st_drD, "type")
syso(b2)

//获取自定义参数任意数据
s b3 = ulag(a, st_drD, "text")
syso(b3)

//获取下载文件保存的路径
s b4 = ulag(a, st_drD, "filename")
syso(b4)
},(st_drJ,st_ot){
//当下载完目前所有执行
//系统赋值 st_drJ 本次文件下载完成总数
syso(st_drJ)
}


//三个参数的方法设置
s tempdir = "%TempDir"
s savedir = "%SaveDir"
//输入下载临时文件保存目录，输入下载保存目录，输入赋值变量返回一个下载器对象
s a = hdfl(tempdir, savedir)(st_drD,st_drI,st_ot){

syso(st_drD)
},(st_drJ,st_ot){
syso(st_drJ)
}

//六个参数的方法设置
s tempdir = "%TempDir"
s savedir = "%SaveDir"
//输入下载临时文件保存目录，输入下载保存目录, 下载线程数量，连接网络超时时间（25秒的意思），文件重复是否覆盖，输入赋值变量返回一个下载器对象
s a = hdfl(tempdir, savedir, 3, 25000, true)(st_drD,st_drI,st_ot){

syso(st_drD)
},(st_drJ,st_ot){
syso(st_drJ)
}

说明：
常用与单个或多个的文件下载。推荐图片列表下载或小文件下载。

提示：
代码 区域中 属于线程内执行。在其中更新界面控件属性需要使用ufnsui代码
上例子使用tw代码，并且用了ufnsui代码。



【hdfla 文件下载器 增加文件下载项】
用法：
//创建一个文件下载器
s a = hdfl("%TempDir")(st_drD,st_drI,st_ot){

syso(st_drD)
},(st_drJ,st_ot){
syso(st_drJ)
}

//增加下载项
//输入下载器对象，输入下载连接URL，输入自定义整数标识，输入自定义参数任意数据
hdfla(a, "http://abc.com/1.jpg", 1, "abcd123")


//增加下载项，并且自定义保存目录
//输入下载器对象，输入下载连接URL，输入自定义整数标识，输入自定义参数任意数据，输入自定义保存路径
hdfla(a, "http://abc.com/2.jpg", 1, "abcd123", "%abc.jpg")

说明：
调用下载器增加下载项，并且立刻进行下载。

【hdd 配置下载管理器】
用法：
//下载产生的临时文件目录
s a = "%tempdir"
//下载至保存的目录
s b = "%filedir"
//允许同时下载任务数量
s c = 3
//每个任务开启线程数量
s d = 3
//连接失败重试次数
s e = 2
//连接超时时间，25秒的意思
s f = 25000
//是否显示下载进度通知
boolean g = true
hdd(a, b, c, d, e, f, g)

说明：
如果不使用此代码进行配置，那么系统将使用默认配置。下载配置器可以很方便的制作下载文件，并且方便管理。

默认目录属性：
临时文件目录：iApp/DownloadFileDir/TempDefaultDownFile
保存文件目录：iApp/DownloadFileDir/DefaultDownFile

【hdda 下载管理器 增加文件下载项】
用法：

//===========方法一
//下载的链接
s url = "http://abc.com/abc.apk"

//保存的文件名（仅输入文件名,请勿不包含目录）
s name = "abc.apk"

//输入自定义参数任意数据
s data = "abcde123"

//变量v为赋值变量，为下载对象
s v = hdda(url, name, data)

//===========方法二
//下载的链接
s url = "http://abc.com/abc.apk"

//保存的文件名（仅输入文件名,请勿不包含目录）
s name = "abc.apk"

//下载任务的标题
s title = "abc.apk最新版"

//输入自定义参数任意数据
s data = "abcde123"

//变量v为赋值变量，为下载对象
s v = hdda(url, name, title, data)

//===========方法三
//下载的链接
s url = "http://abc.com/abc.apk"

//保存的文件名（仅输入文件名,请勿不包含目录）
s name = "abc.apk"

//下载任务的标题
s title = "abc.apk最新版"

//下载任务的图标
s icon = "@abc.png"

//输入自定义参数任意数据
s data = "abcde123"

//变量v为赋值变量，为下载对象
s v = hdda(url, name, title, icon, data)

//===========方法四
//下载的链接
s url = "http://abc.com/abc.apk"

//保存至目录
s dir = "%filedir"

//保存的文件名（仅输入文件名,请勿不包含目录）
s name = "abc.apk"

//下载任务的标题
s title = "abc.apk最新版"

//下载任务的图标
s icon = "@abc.png"

//是否显示下载进度通知
boolean notsohw = true

//输入自定义参数任意数据
s data = "abcde123"

//变量v为赋值变量，为下载对象
s v = hdda(url, dir, name, title, icon, notsohw, data)

说明：
增加常用的网络文件进行下载。

【hddgl 获取下载管理器下载列表】
用法：
//输入赋值变量返回下载列表
ArrayList<Object> list = hddgl()

//获取第一位数据
s b = gslist(list, 0)
s c = hddg(b, "url")
syso(c)

说明：
获取下载管理器所有的下载列表。

【hddg 获取下载管理器获取下载项属性】
用法：
//下载的链接
s url = "http://abc.com/abc.apk"
//保存的文件名（仅输入文件名,请勿不包含目录）
s name = "abc.apk"
//输入自定义参数任意数据
s data = "abcde123"
//变量v为赋值变量，为下载对象
s v = hdda(url, name, data)

//===========获取下载项的属性
//获取下载项的 ID
s b = hddg(v, "id")

//获取下载项的 下载链接
s b = hddg(v, "url")

//获取下载项的 保存的绝对路径
s b = hddg(v, "dirfilename")

//获取下载项的 下载链接的md5
s b = hddg(v, "urlmd5")

//获取下载项的 保存的目录
s b = hddg(v, "dir")

//获取下载项的 保存的文件名
s b = hddg(v, "filename")

//获取下载项的 下载文件的大小（字节）
s b = hddg(v, "contentlength")

//获取下载项的 已下载的数据（字节）
s b = hddg(v, "equivalent")

//获取下载项的 当前下载速度（字节）
s b = hddg(v, "downloadspeed")

//获取下载项的 当前下载进度百分比
s b = hddg(v, "downloadpercentage")

//获取下载项的 下载状态；（0为等待下载；1为正在下载；2为下载完成；3下载已经暂停或停止；-1下载失败；-2已删除）
s b = hddg(v, "status")

//获取下载项的 是否显示下载通知
s b = hddg(v, "notificationshow")

//获取下载项的 自定义的数据
s b = hddg(v, "text")

//获取下载项的 通知标题
s b = hddg(v, "title")

//获取下载项的 通知图标
s b = hddg(v, "icon")

说明：
可获取详细的下载项目状态属性。

【hdds 设置下载管理器下载项的属性】
用法：
//下载的链接
s url = "http://abc.com/abc.apk"
//保存的文件名（仅输入文件名,请勿不包含目录）
s name = "abc.apk"
//输入自定义参数任意数据
s data = "abcde123"
//变量v为赋值变量，为下载对象
s v = hdda(url, name, data)

//===========可设置的下载项属性

//设置下载项的 下载状态；（0为等待下载；1为正在下载；2为下载完成；3下载已经暂停或停止；-1下载失败；-2已删除）
hdds(v, "status", 0)

//设置下载项的 是否显示下载通知
hdds(v, "notificationshow", true)

//设置下载项的 自定义的数据
hdds(v, "text", "abcd123")

//设置下载项的 通知标题
hdds(v, "title", "abc.apk最新版本")

//设置下载项的 通知图标
hdds(v, "icon", "@abc.png")

说明：
设置下载项目的属性。

【hdduigo 跳转至下载管理器】
用法：
//跳转至下载管理器
hdduigo()

//跳转至下载管理器，并且自定义标题栏颜色
//主体颜色
s a = "#387bd6"
//底部横杠颜色
s b = "#255eab"
hdduigo(a, b)

说明：
跳转至文件下载的管理器。

【ufnsui 线程更新界面】
用法：
ufnsui()
{
tw(a)
us(1, "text", "内容")

}

说明：
线程中直接修改界面或修改设置控件属性，出错。
需要使用ufnsui模块进行更新或设置控件属性。

提示：
线程中获取控件数据不会出错。


【se 正则表达式操作】
用法：
//===========例子1；所有属性展示
//字符串
s a = "qqqq123456eee"
//正则表达式
s b = "([a-z]+)(\\d+)"
//更多参数
s c = 0
java.util.regex.Matcher d = se(a, b, c)
syso(d)

//替换成，将替换全部
s e = se(d, "sral", "1:$1, 2:$2")
syso(e)
//替换成，只替换第一个
s e = se(d, "srft", "1:$1, 2:$2")
syso(e)

//返回是否匹配成功，赋值返回true或 false
.s e = se(d, "ms")

//开始匹配 或 匹配下一个，赋值返回true或 false
.boolean e = se(d, "find")

//给定位置序号进行匹配，赋值返回true或 false
.boolean e = se(d, "find", 1)

//获取匹配组的数量，当前为2组：([a-z]+)、(\d+)
.s e = se(d, "gl")

//获取第1组匹配到的子字符串在字符串中的开头位置 
.s e = se(d, "start", 1)

//获取第1组匹配到的子字符串在字符串中的结尾位置 
.s e = se(d, "end", 1)

//获取第1组匹配到的子字符串
.s e = se(d, "group", 1)
//获取第2组匹配到的子字符串
.s e = se(d, "group", 2)


//===========例子2；获取所有手机号

//字符串
s a = "我的号码 13612345678 , 你的号码 13412345678"
//正则表达式
s b = "[1][3-8]\\d{9}"
//更多参数
s c = 0
java.util.regex.Matcher d = se(a, b, c)

//开始匹配 或 匹配下一个
boolean ee = se(d, "find")

//循环判断是否匹配成功
xh (ee)
{
//因为 [1][3-8]\\d{9} 没有组，所以这里我们输入 0
boolean e = se(d, "group", 0)

//打印出匹配到的子字符串
syso(e)

//开始匹配 或 匹配下一个
ee = se(d, "find")
}

//===========例子3；判断是否为手机号

//字符串
s a = "13612345678"
//正则表达式
s b = "^[1][3-8]\\d{9}$"
//更多参数
s c = 0
java.util.regex.Matcher d = se(a, b, c)

boolean e = se(d, "ms")
rg e == true{
syso("手机号格式正确")
},{
syso("手机号格式错误")
}


说明：
常用与字符串处理，高效的处理字符串，以及检测字符串类型等。使用此方法，需要对正则表达式有部分知识。

【usg 闪光灯操作】
用法：
//开启闪光灯
//输入闪光灯变量对象，输入是否开启闪光灯
android.hardware.Camera sgd = null
sgd = usg(sgd, true)

//关闭闪光灯
//输入闪光灯变量对象，输入是否开启闪光灯
sgd = usg(sgd, false)

说明：
开启或关闭 设备闪光灯！

说明：
常用照明。

注意：
此方法调用将无法与摄像头同时调用。如启动摄像头需要使用闪光灯，可在摄像头操作中开启闪光灯。

【uzd 震动器操作】
用法：
//震动1秒时长
//输入振动器变量对象，输入震动时长
s zdq = null
zdq = uzd(zdq, 1000)

//静止1秒，震动1秒，静止1秒，震动1秒，静止1秒，震动1秒，静止1秒，..， 并且不重复
//输入振动器变量对象，输入震动规则，输入是否重复循环执行
s sz = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 }
zdq = uzd(zdq, sz, false)

//强制停止震动器
uzd(zdq, "sp")

//检查硬件是否具有振动器
boolean b = uzd(zdq, "ip")
syso(b)

说明：
常用提示用户。

【usxq 开启前置摄像头】
用法：
s ps = null
//开启摄像头
//输入摄像头变量对象，输入面控件的对象或ID，摄像头旋转角度
ps = usxq(ps, 1, 90)

//输入摄像头变量对象，输入面控件的对象或ID，摄像头旋转角度，输入拍摄宽度像素，输入拍摄高度像素，输入图像品质1-100
ps = usxq(ps, 1, 90, 640, 480, 95)

//自动对焦拍摄
//输入摄像头变量对象，输入保存路径，输入图像旋转角度，输入拍摄是否停止预览
ps = usx(ps, "shot", "%abc.jpg", -90, false)

说明：
指定打开前置摄像头。

注意：
此功能需要与一个面控件进行绑定，你可以在面控件上面设置拍摄事件。

注意：
此代码仅限于载入事件调用。

【usxh 开启后置摄像头】
用法：
s ps = null
//开启摄像头
//输入摄像头变量对象，输入面控件的对象或ID，摄像头旋转角度
ps = usxh(ps, 1, 90)

//输入摄像头变量对象，输入面控件的对象或ID，摄像头旋转角度，输入拍摄宽度像素，输入拍摄高度像素，输入图像品质1-100
ps = usxh(ps, 1, 90, 1280, 960, 95)

//自动对焦拍摄
//输入摄像头变量对象，输入保存路径，输入图像旋转角度，输入拍摄是否停止预览
ps = usx(ps, "shot", "%abc.jpg", 90, false)

说明：
指定打开后置摄像头。

注意：
此功能需要与一个面控件进行绑定，你可以在面控件上面设置拍摄事件。

注意：
此代码仅限于载入事件调用。

【usx 摄像头操作】
用法：
//开启摄像头
usxh(ps, 1, 90)

//自动对焦拍摄
//输入摄像头变量对象，输入保存路径，输入图像旋转角度，输入拍摄是否停止预览
usx(ps, "shot", "%abc.jpg", 90, false)

//开始预览
usx(ps, "st")

//停止预览
usx(ps, "sp")

//旋转摄像头角度
usx(ps, "rotaing", 180)
//获取旋转摄像头角度
s b = usx(ps, "getrotaing")
syso(b)

//启动摄像头闪光灯
usx(ps, "usg", true)

//结束摄像头组件变量对象
usx(ps, "re")

说明：
摄像头的控制。

【bly 录制音频】
用法：
android.media.MediaRecorder ly = null
//开始录制
//输入录音变量对象，输入保存文件路径
bly(ly, "%abcd.amr")

//停止录音
bly(ly, "sp")

说明：
常用于录制音频。

说明：
可使用 bfm 代码来播放录制好的音频。

【ujp 截取屏幕】
用法：
//输入保存路径，输入图像品质（1-100）
ujp("%123.jpg", 70)

说明：
常用于截取当前界面。

【sqlite 数据库操作】
用法：
android.database.sqlite.SQLiteDatabase data = null
//连接一个私有数据库，如果不存在将自动新建
//输入数据库对象变量，输入数据库文件名
data = sqlite(data, "iapp.db")

//连接一个公共数据库，如果不存在将自动新建
//输入数据库对象变量，输入数据库文件名
data = sqlite(data, "%iapp.db")

//判断数据库是否存在
boolean b = sqlite("iapp.db", "ip")
syso(b)

//删除数据库
boolean b = sqlite("iapp.db", "del")
syso(b)

//释放数据库
sqlite(data, "re")

说明：
进行数据库的操作。

【sql 数据表操作】
用法：

//创建数据表
s table = "_id integer primary key,url text, filename text,status interger,createTime datetime"
s b = sql(data, "info", "add", table)

//判断数据表是否存在
s b = sql(data, "info", "ip")
syso(b)

//删除数据表
s b = sql(data, "info", "del")
syso(b)

//添加数据表一条数据
s table = "url,filename,status,createTime"
s value = "'http://abc.com/abc.apk', 'abc.apk', 1, '" + time(0) + "'"
s b = sql(data, "info", "add", table, value)
syso(b)

//修改数据表的数据，若不需要设置条件(status=2)可设为 null 视为适用于执行所以数据
s b = sql(data, "info", "up", "status=2", "_id=1")
syso(b)

//删除数据表的数据，若不需要设置条件(_id=1)可设为 null 视为适用于执行所以数据
s b = sql(data, "info", "del", "_id=1")
syso(b)


//查询，若不需要设置条件(status=1 order by _id desc LIMIT 0,1)可设为 null 视为适用于执行所以数据

// LIMIT <跳过的数据数目>, <取数据数目>
s table = "_id,url,filename,status,createTime"
s sqlx = "status=1 order by _id desc LIMIT 0,1"
s da = sql(data, "info", "sele", table, sqlx)

//自定义sql查询
//s sqlx = "select _id,url,filename,status,createTime from info where status=1 order by _id desc LIMIT 0,1"
//s da = sql(data, sqlx)

//光标对象移到下一条数据
boolean ee = sqlsele(da, "next")
xh (ee)
{

//获取光标对象的第一列数据
s e = sqlsele(da, 0)
syso(e)

//获取光标对象的第二列数据
s e = sqlsele(da, 1)
syso(e)

//光标对象移到下一条数据
ee = sqlsele(da, "next")
}


//自定义的sql执行，需要对sql语法了解才能灵活运用
s sqlx = "insert into info (url,filename,status,createTime) values ('http://abc.com/abc.apk', 'abc.apk', 1, '2016-7-31 10:31:21')"
sql(sqlx, data)

说明：
数据表的操作。

注意：
在执行sql语句的时候，需要注意你的字符串的特殊字符的转义。
     /   ->    //
     '   ->    ''
     [   ->    /[
     ]   ->    /]
     %   ->    /%
     &   ->    /&
     _   ->    /_
     (   ->    /(
     )   ->    /)

【sqlsele 查询数据操作】
用法：

//获取光标对象的第一列数据
s e = sqlsele(data, 0)

//获取光标对象有多少列
s e = sqlsele(data, "columncount")
syso(e)

//获取总共查询到多少条数据
s e = sqlsele(data, "count")
syso(e)

//光标对象移到下一条数据
s e = sqlsele(data, "next")

//光标对象移到上一条数据
s e = sqlsele(data, "previous")

//光标对象移到第一条数据
s e = sqlsele(data, "first")

//光标对象移到最后第一条数据
s e = sqlsele(data, "last")

//光标对象移到指定第2条数据
sqlsele(data, "position", 2)

//获取光标对象当前位置
s e = sqlsele(data, "getposition")
syso(e)

//释放数据查询
sqlite(data, "re")

说明：
数据查询的操作。

【dha 渐变透明度动画】
用法：
//创建一个渐变透明度动画，开始显示，然后渐变消失
//输入动画开始是否透明，输入动画结束是否透明
android.view.animation.AlphaAnimation dh = dha(true, false)
dh(dh, "duration", 2000)
us(2, "dh", dh)

说明：
常用于控件透明度动画。

【dhs 渐变尺寸伸缩动画】
用法：
//创建一个渐变尺寸伸缩动画
//0为没有，2.5为原始2.5倍

//输入X开始尺寸比例，输入X结束尺寸比例，输入Y开始尺寸比例，输入Y结束尺寸比例
android.view.animation.ScaleAnimation dh = dhs(0.5, 2.5, 0.5, 2.5)
dh(dh, "duration", 2000)
us(2, "dh", dh)

//输入X开始尺寸比例，输入X结束尺寸比例，输入Y开始尺寸比例，输入Y结束尺寸比例，输入X位置类型，输入X坐标的开始位置，输入Y位置类型，输入Y坐标的开始位置
android.view.animation.ScaleAnimation dh = dhs(0.5, 2.5, 0.5, 2.5, 1, 0.5, 1, 0.5)
dh(dh, "duration", 2000)
us(2, "dh", dh)

说明：
常用于控件伸缩动画。

位置类型：
0 默认
1 以对象本身为基准位置类型
2 以父控件为基准位置类型

【dht 画面位置移动动画】
用法：
//创建一个画面位置移动动画
//输入开始X坐标上的移动位置，结束X坐标上的移动位置，开始Y坐标上的移动位置，结束Y坐标上的移动位置
android.view.animation.TranslateAnimation dh = dht(30, 80, 30, 80)
dh(dh, "duration", 2000)
us(2, "dh", dh)

说明：
常用于控件移动动画。

【dhr 画面旋转动画】
用法：
//创建一个画面旋转动画
//输入动画开始的旋转角度，输入动画旋转到的角度
android.view.animation.RotateAnimation dh = dhr(0, 180)
dh(dh, "duration", 2000)
us(2, "dh", dh)

//输入动画开始的旋转角度，输入动画旋转到的角度，输入X位置类型，输入X坐标的开始位置，输入Y位置类型，输入Y坐标的开始位置
android.view.animation.RotateAnimation dh = dhr(0, 180, 1, 0.5, 1, 0.5)
dh(dh, "duration", 2000)
us(2, "dh", dh)

说明：
常用于控件旋转动画。

位置类型：
0 默认
1 以对象本身为基准位置类型
2 以父控件为基准位置类型

【dhset 动画集合】
用法：

//渐变尺寸伸缩动画
android.view.animation.ScaleAnimation dh1 = dhs(0.5, 2.5, 0.5, 2.5)
dh(dh1, "duration", 2000)

//画面位置移动动画
android.view.animation.TranslateAnimation dh2 = dht(30, 80, 30, 80)
dh(dh2, "duration", 2000)

//画面旋转动画
android.view.animation.RotateAnimation dh3 = dhr(0, 180)
dh(dh3, "duration", 2000)

//创建一个动画集合
//输入动画集合变量对象，输入是否使用动画集合的interpolator，输入动画...（可输入N个参数）
s sz = { dh1, dh2, dh3, dh4 }
s dhlist = dhset(false, sz)
us(2, "dh", dhlist)
	
说明：
常用于动画集合执行。

提示：
动画集合允许被其他动画集合添加成为子动画。

提示：
动画集合如果设置了动画控制属性，同时也会重置所有子控件的属性。

【dhas 队列动画执行】
用法：
//旋转动画
//输入动画变量对象，输入控件ID或控件对象，输入动画类型，输入旋转角度...（可输入N个参数）
s sz1 = { 60, 180 }
s sz2 = { 30, 80, 60, 20, 60 }
s sz3 = { 30, 80 }
s dh = dhas(2, "rotation", sz1)
//s dh = dhas(2, "rotationX", sz2)
//s dh = dhas(2, "rotationY", sz3)
dh(dh, "duration", 2000)
dh(dh, "start")

//伸缩动画
//输入动画变量对象，输入控件ID或控件对象，输入动画类型，输入伸缩尺寸比例...（可输入N个参数）
s sz1 = { 1.5, 2.5 }
s sz2 = { 1.5, 2.5, 1.2, 2.6, 1.3 }
s dh = dhas(2, "scaleX", sz1)
//s dh = dhas(2, "scaleY", sz2)
dh(dh, "duration", 2000)
dh(dh, "start")

//移动动画
//输入动画变量对象，输入控件ID或控件对象，输入动画类型，输入移动到位置...（可输入N个参数）
s sz1 = { 0, 60 }
s sz2 = { 0, 60, 30, 10, 60 }
s dh = dhas(2, "translationX", sz1)
//s dh = dhas(2, "translationY", sz2)
dh(dh, "duration", 2000)
dh(dh, "start")

//透明度
//输入动画变量对象，输入控件ID或控件对象，输入动画类型，可见度比例(0.0至1.0)...（可输入N个参数）
s sz1 = { 1, 0.3, 1, 0.2, 1 }
s dh = dhas(2, "alpha", sz1)
dh(dh, "duration", 2000)
dh(dh, "start")

说明：
自定义队列动画执行。


【dhast 队列动画集合】
用法：

//旋转动画
s sz1 = { 60, 180 }
s dh1 = dhas(2, "rotation", sz1)
dh(dh1, "duration", 2000)

//伸缩动画
s sz2 = { 1.5, 2.5 }
s dh2 = dhas(2, "scaleX", sz2)
dh(dh2, "duration", 2000)

//移动动画
s sz3 = { 0, 60 }
s dh3 = dhas(2, "translationX", sz3)
dh(dh3, "duration", 2000)

//透明度
s sz4 = { 1, 0.3, 1, 0.2, 1 }
s dh4 = dhas(2, "alpha", sz4)
dh(dh4, "duration", 2000)

//顺序执行
s sz5 = { dh1, dh2, dh3, dh4 }
s dhlist = dhast("sequen", sz5)

//同时执行
//s sz6 = { dh1, dh2, dh3, dh4 }
//s dhlist = dhast("together", sz6)
dh(dhlist, "start")

说明：
常用于动画集合执行。

提示：
队列动画集合允许被其他队列动画集合添加成为子动画。

提示：
动画集合如果设置了动画控制属性，同时也会重置所有子控件的属性。


【dh 动画控制】
用法：

//========动画的属性（非队列动画）设置========================

//取消动画，取消后若需要重新播放，需要先执行 reset 然后再执行 start 进行播放
dh(dh, "cancel")

//重置动画属性
dh(dh, "reset")

//启动动画
dh(dh, "start")

//动画持续时长
dh(dh, "duration", 2000)

//延迟执行，延迟指定时长后才执行动画
dh(dh, "delay", 2000)

//启动动画结束填充效果（如果设false 那么 after 与 before将无效）
dh(dh, "enabled", true)

//动画执行后，控件停留执行结束状态
dh(dh, "after", true)

//动画执行后，控件停留执行开始状态
dh(dh, "before", true)

//动画重复执行的次数
dh(dh, "repeat", 20)

s dh2 = dhas(2, "rotation", 60, 180)
//动画集合添加动画，仅用于 dhset 动画集合追加更多的动画
dh(dh, "add", dh2)

//========队列动画的属性设置========================

//取消动画
dh(dh, "cancel")

//播放动画
dh(dh, "start")

//动画持续时长
dh(dh, "duration", 2000)

//延迟执行，延迟指定时长后才执行动画
dh(dh, "delay", 2000)

//动画是否正在运行
s b = dh(dh, "running")
syso(b)

//设置动画执行的控件ID或控件对象
dh(dh, "target", 2)

//克隆动画
s dh2 = dh(dh, "clone")

说明：
常用于动画的控制管理。

【dhon 动画监听事件】
用法：
//========动画（非队列动画）设置监听事件========================
// 输入类型 Animation
dhon(dh)
{

//当结束动画时
syso("End")
},{

//当重复动画时
syso("Repeat")
},{

//当启动动画时
syso("Start")
}


//========队列动画设置监听事件========================
// 输入类型 Animator
dhonx(dh)
{

//当结束动画时
syso("End")
},{

//当重复动画时
syso("Repeat")
},{

//当启动动画时
syso("Start")
},{

//当取消动画时
syso("Cancel")
}


说明：
常用于动画状态的监听。

提示：
该事件使用的选择性，可顺序选择性保留。

【dhb 动画背景】
用法：
//创建动画背景
//输入动画背景变量对象，输入是否重复执行
android.graphics.drawable.AnimationDrawable dh = dhb(true)

//添加元素
//输入动画背景变量对象，输入背景图像或图片变量或背景对象，输入显示时长
dhb(dh, "@t1.png", 1000)
dhb(dh, "@t2.png", 1000)
dhb(dh, "@t3.png", 1000)

//设为指定控件背景
us(2, "background", dh)

//启动动画
dhb(dh, "start")

//停止动画
//dhb(dh, "stop")

//是否在运行
s b = dhb(dh, "running")
syso(b)

说明：
常用于组合一个背景动画。

【hsas 开启浏览器控件交互(裕语言+js+html5)】
用法：
//开启浏览器控件支持iapp交互
//输入浏览器控件ID或对象，输入是否开启
hsas(1, true)

//hsas(1, false)

说明：
常用于浏览器中的JavaScript代码于iapp代码的互相调用。

【has 裕语言交互JavaScript语言】
用法：
//首先将 web.html 放入用户文件中

//设置浏览器控件显示的html内容
s a = "@web.html"
s b = "utf-8"
s c = fr(a, b)

s d = "utf-8"
s e = "text/html"
boolean f = us(1, "url", c, d, e)

//因为浏览器加载内容属于异步操作，如果立刻执行下面的代码会执行失败
//所以将下面的代码放入某项单击事件中

s a = "go('呀！')"
//输入浏览器控件ID或对象，输入JavaScript的方法
has(1, a)

//带返回值解决方案
//s a = "go2('呀！')"
//输入浏览器控件ID或对象，输入JavaScript的方法
//has(1, a)

说明：
常用于浏览器中的JavaScript代码于iapp代码的互相调用。

注意：
在载入事件设置浏览器控件的加载html内容，它不会立刻加载完成。所以如果将 裕语言交互js的代码也写在载入事件，会导致交互调用失败。必须等待浏览器加载完毕html内容后，才能交互。

注意：
建议尽量使用JavaScript调用交互裕语言，效率较高。裕语言调用执行JavaScript的方法效率要慢数倍。

注意：
has 不应该放在新线程中，测试发现5.1系统has放入新线程中报错。

注意：
本例子需要注意编码，否则将乱码。

html（web.html）文件（utf-8编码）例子：
<html>
<head>
<script type="text/javascript">
function go(o)
{
document.getElementById("sb").innerHTML += "打我" + o
}
function go2(o)
{
document.getElementById("sb").innerHTML += "打我" + o
iapp.s("sss.sb", document.getElementById("sb").innerHTML)
}
</script>
</head>
<p id="sb">哈哈，你来</p>
</html>


【JavaScript交互裕语言】
用法：
//首先将 web.html 放入用户文件中

//设置浏览器控件显示的html内容
s a = "@web.html"
s b = "utf-8"
fr(a, b, c)

s d = "utf-8"
s e = "text/html"
us(1, "url", c, d, e, f)

//此方法，主要是在JavaScript中写交互代码哦
//JavaScript中交互方法列表（用于交互裕语言）：

/.

//调用裕语言模块方法，不带返回变量的
iapp.fn('a.b("' + o + '")')

//调用裕语言模块方法，带返回变量的
var value = iapp.fn2('a.c("' + o + '")', b)

//设置裕语言变量数据
iapp.s(o)

//获取裕语言变量数据
var value = iapp.g(o)
./
说明：
常用于浏览器中的JavaScript代码于iapp代码的互相调用。

注意：
建议尽量使用JavaScript调用交互裕语言，效率较高。裕语言调用执行JavaScript的方法效率要慢数倍。

注意：
本例子需要注意编码，否则将乱码。


html（web.html）文件（utf-8编码）例子：
<html>
<head>
<script type="text/javascript">

//不带返回变量的
function go(o)
{
//调用的是 模块a.myu 中的 b方法
iapp.fn('a.b("' + o + '")')
}

//带返回变量的
//执行模块后，获取一个变量并返回到javascript方法里
function go2(o, b)
{
//调用的是 模块a.myu 中的 c方法
var value = iapp.fn2('a.c("' + o + '")', b)
alert('变量 sss.abc：' + value)
}

//设置全局变量数据
//同理，下面也有设置界面变量、设置局部变量的例子
function ss(o, b)
{
iapp.s(o, b)
}

//获取全局变量数据
//同理，下面也有获取界面变量、获取局部变量的例子
function gs(o)
{
var value = iapp.g(o)
alert('变量 sss.abc：' + value)
}

</script>
</head>
<p><a href="javascript:void(0)" onclick="go('呵呵')">调用裕语言的模块方法</a></p>
<p></p>
<p></p>
<p><a href="javascript:void(0)" onclick="go2('呵呵', 'sss.abc')">调用裕语言的模块方法，并返回sss.abc变量内容</a></p>
<p></p>
<p></p>
<p><a href="javascript:void(0)" onclick="ss('sss.abc', '呵呵')">设置裕语言的sss.abc全局变量数据</a></p>
<p></p>
<p></p>
<p><a href="javascript:void(0)" onclick="gs('sss.abc')">获取裕语言的sss.abc全局变量数据</a></p>
</html>

模块（a.myu）例子：
fn b(a)
//打印出数据
syso(a)
end fn

fn c(a)
//打印出数据
syso(a)
sss abc = "666呵呵"
end fn

【uxf 显示悬浮窗】
用法：

//输入界面名，输入宽度，输入高度，输入对其方式，输入赋值变量
s w = -1
s h = -1
s gravity = "top|right"
s v = uxf("a.iyu", w, h, gravity)

// 或

s v = uxf(a.iyu, w, h, gravity)

//输入界面名，输入X显示位置，输入Y显示位置，输入宽度，输入高度，输入类型的窗口，输入对其方式，输入flags，输入format，输入赋值变量
s x = 0
s y = 0
s w = -1
s h = -1
s type = 0
s gravity = "top|right"
s flags = 0
s format = 0
uxf("a.iyu", x, y, w, h, type, gravity, flags, format, v)
// 或
uxf(a.iyu, x, y, w, h, type, gravity, flags, format, v)

//刷新悬浮窗口的布局，常用于通过us设置后的刷新
//输入界面根控件的控件对象
uxf(v)


//移除悬浮窗口
//输入界面根控件的控件对象，输入标识
uxf(v, "del")


//重置悬浮窗的属性
//输入界面根控件的控件对象，输入标识，输入X显示位置，输入Y显示位置，输入宽度，输入高度，输入对其方式
s x = 0
s y = 0
s w = -2
s h = -2
s gravity = "top|right"
uxf(v, "set", x, y, w, h, gravity)

//重置悬浮窗的属性
//输入界面根控件的控件对象，输入标识，输入X显示位置，输入Y显示位置，输入宽度，输入高度，输入对其方式
s x = 0
s y = 0
s w = -1
s h = -1
s type = 0
s gravity = "top|right"
s flags = 0
s format = 0
uxf(v, "set", x, y, w, h, type, gravity, flags, format)

说明：
常用于显示悬浮窗窗口。

提示：
可通过 View b = gvs(v, "a.1") 代码进行获取悬浮窗内的子控件，然后对其进行操作。

提示：
可通过下例代码，控制窗口位置的移动
//更新窗口位置
us(v, "x", 100)
us(v, "y", 100)

//获取窗口位置
ug(v, "x", xx)
ug(v, "y", yy)

//通过us 更新后， 需要刷新悬浮窗口的布局
uxf(v)


对齐方式：
center：居中
top：顶
bottom：底
left：左
right：右
center_vertical：垂直居中
center_horizontal：水平居中

输入flags：
0 不许获得焦点（编辑框输入法将无法弹出）
1 可以获得焦点，返回键将不可用


【tts 文本转换语音】
用法：
//创建一个TTS对象
//输入赋值对象
s a = tts()


//创建一个TTS对象；并且直接设置播放
//输入赋值对象，输入语言代码，输入语速率，输入音高率，输入播放文字（可传入null）
tts(a, "en", "I love you", 1, 1)


//获取TTS对象初始化状态；赋值变量返回 0未完成初始化 1初始化成功 -1初始化失败 -2初始化语言失败 -3当前TTS对象不可用
//输入TTS对象，输入标识，输入赋值变量
s b = tts(a, "zt")
syso(b)


//播放文字；模式 0替换以前的任务 1队列追加至后面
//输入TTS对象，输入标识，输入播放文字，输入模式，输入赋值变量
s b = tts(a, "st", "I love you", 0)
syso(b)


//文字转换音频文件
//输入TTS对象，输入标识，输入文字，输入保存路径，输入赋值变量
s b = tts(a, "ft", "I love you", "123.wav")
syso(b)


//设置语言
//输入TTS对象，输入标识，输入语言代码
tts(a, "lg", "en")


//设置语音播放速率。1为正常，值越低语速越慢（0.5是正常的一半），值越大语速越快（2是正常的两倍）
//输入TTS对象，输入标识，输入小数
tts(a, "se", 1)


//设置音高率，值越大声音越高音，值越小声音越低音，正常为1.0
//输入TTS对象，输入标识，输入小数
tts(a, "ph", 1)


//检查是否TTS正在播放
//输入TTS对象，输入标识
s b = tts(a, "ip")
syso(b)


//释放TTS使用的资源
//输入TTS对象，输入标识
tts(a, "re")


//停止所有任务
//输入TTS对象，输入标识，输入赋值变量
s b = tts(a, "sp")
syso(b)


//检查是否一个可用的TTS对象
//输入TTS对象，输入标识，输入赋值变量
s b = tts(a, "is")
syso(b)


说明：
常用于文本转化为音频，并且播放。


语言代码：
- 系统默认支持语言
美国    en
德国    de
意大利  it
法国    fr

- 需安装第三方语言包（讯飞语音TTS），并且设置语言
日本    ja
韩国    ko
中国    zh


安装与设置中文语言：

下载其中一个 
(4.0系统)讯飞语音TTS http://m.yx93.com/app.aspx?id=28515  
(2.2系统)讯飞语音TTS http://m.yx93.com/app.aspx?id=28513

安装 讯飞语音TTS

安卓手机》设置》语言和输入法》文本转语音输入》选择 讯飞语音合成 ,默认引擎 讯飞语音合成 , 语言 中文
（设置因为各品牌细节不同，但是都大同小异）


注意事项：
单独TTS对象创建后，需要有一个异步初始化过程，如果创建TTS对象然后直接播放文本将无法成功。需要先完成初始化后，然后播放文本。

注意事项：
文字转语音TTS输出；默认语言状态：完全支持 中文


【blp 录制屏幕】
用法：
s b = "123.mp4"
//输入储存录制文件路径，输入视频宽度，输入视频高度，输入视频码率，输入视频帧率
blp(b, 1280, 720, 1024000, 30)

//开始录制
s b = blp("st")
syso(b)

//停止录制
s b = blp("sp")
syso(b)

//释放资源
s b = blp("re")
syso(b)

//判断是否正在录制
s b = blp("ip")
syso(b)

说明：
用于手机屏幕录制。

注意：
仅支持系统Android 5.0以及以上才有效果！
Android 5.0以下的系统，无效果！


【otob 转换为字节组】
用法：
//将文件转换为字节组，字节组将为字符串形式返回赋值给“b”
s b = otob("%abc.txt")
syso(b)

//将字符串转换为字节组
s b = otob("utf-8", "nihao")
syso(b)

//不设置编码
s b = otob(null, "nihao")

//将文件转换成 byte[] 字节数组对象
byte[] b = otob("file", null, "%abc.txt")
syso(b)

//将字符串转换成 byte[] 字节数组对象
byte[] b = otob("str", "utf-8", "nihao")
syso(b)


说明：
将字符或文件转换为字节组

【btoo 字节组还原】
用法：
s b = otob("%abc.txt")
//将字节组转换为文件
//输入字节组，文件路径，是否覆盖，变量 b 可为byte[] 字节数组对象
btoo(b, "%abc2.txt", true)


s b = otob("utf-8", "nihao")
//字节组转换为字符串，变量 b 可为byte[] 字节数组对象
s c = btoo("utf-8", b)
syso(c)

//不设置编码
s c = btoo(null, b)

说明：
将字节组转换为字符或文件

【sot Socket网络通信】
用法：
//服务端
//服务端口，临时文件目录，接受客户超时，客户连接超时，是否覆盖文件
s b = sot(8668, "%iApp/tempSocket", 0, 0, false)(msg,ss){
syso(msg)
syso(ss)
}

//客户端
//服务地址，服务端口，服务连接超时，是否覆盖文件
s b = sot("192.168.1.100", 8668, 0, false)(msg,ss){
syso(msg)
syso(ss)
}

//发送字符串，必须放在线程内
sot(b, "str", "nihao")

//发送文件，必须放在线程内
sot(b, "file", "%abc.txt")

//发送字节组，必须放在线程内
s c = otob("nihao", "utf-8")
sot(b, "bt", c)

//发送不带信息头 byte[]字节组，必须放在线程内
sot(b, "bt2", bytes)

//关闭释放sot
sot(b, "re")

//获取sot是否已释放
s c = sot(b, "ip")

//获取ID总数
s c = sot(b, "id")

//获取连接对象列表
s c = sot(b, "list")

//获取连接对象列表的第一位
s c = sot(b, "list", 0)

//获取连接总数
s c = sot(b, "size")

//是否允许接受新连接
sot(b, "new", true)


说明：
Socket 管理操作。服务端发送消息将批量发送给所有连接。

服务端说明：
要求：
1.能连接公共网络 或 内网
2.拥有固定IP作为客户端连接的目标
3.电脑、手机、平板电脑等设备上运行服务端。
4.可使用iapp在自己的手机上面开发服务端，并运行服务端。

客户端说明：
要求：
1.能连接公共网络 或 内网
2.可使用iapp在自己的手机上面开发客户端，并连接服务端。

常见开发：
使用手机或电脑作为服务端，手机客户端与服务端相互传递文件、数据等。

【sota 单个Socket通信操作】
用法：
//获取连接对象列表的第一位，变量“c”属于单个Socket通信
s c = sot(b, "sl", 0)

//获取通信对方的IP
s d = sota(c, "ht")

//获取sota是否已释放
s d = sota(c, "ip")

//关闭释放sota
sota(c, "re")

//获取socket对象
s d = sota(c, "socket")

//获取连接对象ID
s d = sota(c, "id")

//发送字符串，必须放在线程内
sota(c, "str", "nihao")

//发送文件，必须放在线程内
sota(c, "file", "%abc.txt")

//发送字节组，必须放在线程内
s d = otob("utf-8", "nihao")
sota(c, "bt", d)

//发送不带信息头 byte[]字节组
sota(c, "bt2", bytes)

说明：
常用于单个Socket通信的操作管理


【loadso 加载动态库】
用法：
//比如加载 libabc.so
loadso("abc")

说明：
加载SO动态链接库。


【loadjar 加载jar库】
用法：
//比如加载 abc.jar
//返回变量 库对象
s b = loadjar("abc.jar")
syso(b)

//比如加载 abc.apk
//包含Activity需要传入true，赋值变量 库对象
s b = loadjar("abc.apk", true)
syso(b)

说明：
用于加载一些jar，dex，apk 的 sdk。需要把jar文件导入至项目资源的lib目录里，jar加载过程将联网校验。
如果附带SO动态链接库，需要把SO文件载入至项目资源。


【cls 获取完整接口类】
用法：
//获取一个类，输入完整类名如 java.lang.Math
//赋值变量 类对象
s a = cls("java.lang.Math")
syso(a)

//获取一个字符串类，常用类型可直接输入类名如 String
s b = cls("String")
syso(b)

//加载SDK abc.jar，并获取SDK里一个类 输入完整类名 com.sdk.abc
s a = loadjar("abc.jar")
s c = cls(a, "com.sdk.ceshi")
syso(c)

用法：
获取一个类；或从 jar SDK包获取类；

注意：完整类名区分大小写

【clssm 获取类的所有接口】
用法：
s b = cls("String")

//获取所有构造函数
s c = clssm(b, "init")

//获取所有函数方法
s c = clssm(b, "method")

//获取所有变量
s c = clssm(b, "field")


说明：
返回一个数组。


【java 调用java代码方法】
用法：
//调用java api java.lang.String.indexOf(s string) 查询字符56 在123456789 中位置
s c = cls("String")
s sz = { "String", "56" }
s a = javax("123456789", c, "indexOf", sz)
syso(a)


//初始化一个StringBuilderd
s sz = { "String", "12345" }
s sz2 = {"String", "6789"}
s a = javanew("java.lang.StringBuilder", sz)
s b = java(a, "java.lang.StringBuilder.append", sz2)
s c = java(a, "java.lang.StringBuilder.toString")
syso(c)


s sz = {"int", 123}
s jar = loadjar("test.jar")
s c1 = cls(jar, "com.sdk.ceshi")
//调用静态方法 com.sdk.ceshi类 c 方法
s c = javax(null, c1, "c", sz)
syso(c)

//调用静态变量 com.sdk.ceshi类 a 变量
s c = javags(null, c1, "a")
syso(c)

//初始化com.sdk.ceshi类
//返回对象变量，输入完整类名或 cls方法的返回变量
s a = javanew(c1)

//访问变量，com.sdk.ceshi类 b变量
s c = javags(a, c1, "b")
syso(c)

//设置变量，com.sdk.ceshi类 b变量
s c = javass(a, c1, "b", "123456")
syso(c)


说明：
支持 android 所有的api；以及 自加载的jar SDK 的 api

注意：完整类名或 方法名 或 变量名 区分大小写

传递参数：
要传递的参数可设置多个，格式为一个数组 {  } 括起来的，参数为格式：类名， 值，类名， 值...

activity：默认变量 Activity组件

javax 与 java 方法区别：
javax：第3位参数完整类名，第4位参数方法名。类名可传入 cls方法的赋值变量；总共6位参数
java：第3位参数 完整类名和方法名。总共5位参数。


【json json数据解析】
用法：
//解析json数据，双引号要加 \ 进行转义
s text = "{\"id\":1, \"name\":\"xiaobai\", \"age\":16}"
s jo = json(text)

//获取id
s a = json(jo, "get", "id")
syso(a)
//获取name
s b = json(jo, "get", "name")
syso(b)
//获取age
s c = json(jo, "get", "age")
syso(c)

//修改age数据
json(jo, "set", "age", 20)

//删除id数据
json(jo, "del", "id")

//打印json数据
s text = json(jo, "json")
syso(text)



//解析json列表数据
s text = "{\"userlist\":[{\"id\":1, \"name\":\"niubi\", \"age\":16},{\"id\":2, \"name\":\"wangba\", \"age\":18},{\"id\":3, \"name\":\"goudan\", \"age\":17}]}"
s jo = json(text)

//打印json数据
s list = json(jo, "list", "userlist")
s size = json(list, "size")
xh (size > 0)
{

size = size - 1

s item = json(list, "data", size)

//获取id
s a = json(item, "get", "id")
syso(a)
//获取name
s b = json(item, "get", "name")
syso(b)
//获取age
s c = json(item, "get", "age")
syso(c)

}

说明：
常用于解析服务器反馈的数据。


【utb Toolbar工具栏设置】
用法：

//设置自定义的工具栏 为当前界面的工具栏
//输入Toolbar工具栏的 控件id或控件对象
utb(3)


//绑定侧滑控件，侧滑控件内需要包含左侧滑，绑定后可以在Toolbar工具栏的左图标 控制左边侧滑
//输入Toolbar工具栏的 控件id或控件对象，输入侧滑的 控件id或控件对象
utb(3, 2)


//设置参数
utb("set", "dshe", true)

//设置左图标，可以设置事件监听
utb("left", 3, "@a.png")

//设置左图标的点击事件，注意此代码需在 utb(id) 后，否则事件将无效。
utb("set", "leftck", 3)
{
syso("ok")
}

//设置右菜单图标，无事件。可使用界面菜单事件
utb("right", 3, "@b.png")



//标题
utb("set", "title", "apptitle")

//子标题
utb("set", "subtitle", "appsubtitle")

//自定义布局可输入View类型布局
utb("set", "cv", v)

//显示选项
utb("set", "do", 0)

//显示或隐藏 标题
utb("set", "dste", true)

//显示或隐藏 自定义布局
utb("set", "dsce", true)

//显示或隐藏 主页图标
utb("set", "dshe", true)


//获取参数

//标题
s c = utb("get", "title")

//子标题
s c = utb("get", "subtitle")

//自定义布局可输入View类型布局
s c = utb("get", "cv")

//显示选项
s c = utb("get", "do")

//动作栏布局高度
s c = utb("get", "height")


说明：
常用于设计应用顶部工具栏。

【tws 弹窗提醒】
用法：
//获取展示的控件对象，提醒将在这个控件里展示
android.view.View v = gvs(1)

//无按钮弹出提醒
//输入控件对象可设置null，输入字符，输入显示时长（值0 -1 -2）
tws(v, "ni hao!", 0)


//有按钮弹出提醒
//输入控件对象可设置null，输入字符，输入显示时长（值0 -1 -2），输入按钮标题
tws(v, "ni hao ma?", 0, "hao")
{
syso("ok")
}


【uht 滑动窗体控制】
用法：

//添加新的页面，设置的界面会执行载入事件里的代码
//输入滑动窗体的 控件id或控件对象，输入标识，输入插入序号 如-1为尾部 0为头部，输入标题，输入界面名，输入控件对应的数据项...不限制数量可参考代码ula
s sz1 = {1,2,3}
s sz2 = {"abc","bac","bbc"}
uht(2, "add", -1, "标题", "a.iyu", sz1, sz2)
// 或
uht(2, "add", -1, "标题", a.iyu, sz1, sz2)

//删除界面
//输入滑动窗体的 控件id或控件对象，输入标识，输入界面序号 序号以0开始 -1为尾部
uht(2, "del", 0)

//修改界面标题
//输入滑动窗体的 控件id或控件对象，输入标识，输入界面序号 序号以0开始 -1为尾部
uht(2, "title", 0, "标题2")

//获取页面总数
s b = uht(2, "size", b)
syso(b)

//释放内存
uht(2, "close")


//绑定标签布局，绑定后滑动界面时标签布局会跟随运动，需要注意 标签布局 和 滑动窗体 的子项数量应一致，新增子项时也需要同时增加
//输入滑动窗体的 控件id或控件对象，输入标识，输入标签布局的 控件id或控件对象，是否应刷新其内容
uht(2, "bd", 3, true)
//注意：如果绑定前 标签布局 如有设置子项，绑定时会被清空。绑定后需使用 us(3, "app_tablist", "选项1|选项2|选项3") 代码设置

//增加标签布局 的子项
us(3, "app_tabadd", "选项")

s sz1 = {1,2,3}
s sz2 = {"abc","bac","bbc"}
//添加滑动窗体 的子项
uht(2, "add", -1, "标题", "a.iyu", sz1, sz2)

// 或
uht(2, "add", -1, "标题", a.iyu, sz1, sz2)

说明：
用于动态管理控制滑动窗体和垂直滑动窗体的 新增页面、删除页面、绑定标签布局等。


【cast 强制转换数据类型】
用法：

s a = 123
//转换数据类型并直接赋值
//输入完整类名 或 类对象，输入需要转换的数据变量
s b = cast("String", a)
syso(b)


说明：
常用于数据强制转换。


