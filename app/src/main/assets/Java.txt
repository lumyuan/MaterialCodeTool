LumYuan【初识Java】
Java 是一种可以撰写跨平台应用软件的面向对象的程序设计语言，由 Sun Microsystems 公司在1995年5月 首次发布，即 JavaSE、JavaEE、Java ME 的总称。

Java语言 吸收了C/C++ 语言的各种优点，摒弃了C/C++ 里难以理解的概念（比如：多继承、指针），具有令人赏心悦目的语法和易于理解的语义。Java 语法就像是C++语法的一个“纯净版本”。

Java 具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。
【Java的发展】
Sun公司1995年推出、96发布JDK1.0、19年发布J2SE、J2EE、 J2ME、05年、09年被Oracle收购；
C/S（Client/Server）：需要下载安装本地客户端软件
B/S（Browser/Server）:通过浏览器，输入域名可直接访问的软件
【Java语言的特点】
面向对象：
使用计算机模拟现实世界，解决现实问题，贴近人类思维。
简单：
不易造成内存溢出、减少代码量、可读性强
Java有虚拟机，内置了垃圾收集器（GC），自动完成内存空间的管理，规避了因 人为导致的问题。相对而言更加安全。
跨平台：
JAVA的重要优势：跨操作系统、服务器、数据库
【计算机执行机制】
编译执行：
将源文件编译成机器码，一次编译，多次执行。
特点：执行效率高，不可跨平台。
再具体的环境（这个平台只能在这个平台不能跨平台）中执行一次翻译工作（源文件——>二进制），执行时是二进制文件。
执行效率高，不跨平台，先翻译然后执行翻译后的文件；
解释执行：
将源文件被一行一行解释，一行一行执行。不同的操作系统具备不同的解释器。
特点：执行效率低，可以跨平台
再具体环境一行一行的执行，不同环境都有自己的解释器。效率低、可跨平台。（直接源文件执行）
java先编译为平台中立的字节码文件.class，在执行跨平台的解释执行，将计算机的两种执行合二为一。
【Java名词】
JVM(Java Virtual Machine)虚拟机：（使用软件在不同操作系统中，模拟相同的环境）
JRE(Java Runtime Environoment)运行环境：（包含JVM和解释器，完整的JAVA运行环境）
JDK(Java Development Kit)开发环境：（包含JRE+类库+开发工具包（编译器+调试工具））
【Java基本语法】
```java
package xx.xx.xxx;

public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
```
这是一个基本的Java类文件内容，包含了package（包名）、class（类）和函数体main。

其中，类的子元素元素可以有两个，变量（属性）与方法（函数体），一个Java类可以包含0个或多个属性与方法体
例如：
```java
//空的类
public class User {

}

//只有一个属性
public class User {
    String name;
}

//只有一个属性和一个方法
public class User {
    String name;
    void setName(String name){
        this.name = name;
    }
}

//多个属性和多个方法
public class User {
    String name;
    int age;
    String getName() {
        return name;
    }
    void setName(String name){
        this.name = name;
    }
    int getAge(){
        return age;
    }
    void setAge(int age) {
        this.age = age;
    }
}
```
【变量以及变量的声明】
先看一段代码
```java
String str1 = "你好";
```
上面是一段基础的变量声明代码，在内存中声明了一个名为str1的变量，用来存储字符串“你好”
很容易了解到，在Java中声明变量的语法为：变量类型 变量名 = 值;
当然，也可以先不对其初始化，后续初始化也是可以的

简单来说，变量就是存储数据值的容器。

【方法】
基本语法：
```java
修饰符 返回值 方法名(形式参数列表) {
    //这里写代码
}
```
一般常用的方法修饰符有public、protect、private，修饰符可以省略，省略后默认修饰符为public
public：指定被修饰的方法可以被所有程序直接访问，例如其它类文件可以通过[此类对象.方法名]来调用这个方法
protect：
（1）父类的被protected修饰的类成员包内可见，并且对其子类可见。
（2）父类与子类不在同一个包里，子类只可以访问从父类继承的protected成员，不能访问父类实例化的成员。
private：被其修饰的类成员只能在修饰它的类中被访问，私有化成员一般用于封装，不可以被外部类访问，对外提供get/set方法对其进行访问。

形式参数列表：
形式参数简称形参，是一种调用者与方法之间通信的临时变量；方法的形参数量可以是0个，也可以是很多个，形参与形参之间用[,]隔开

返回值：用来给调用者返回对应类型的值，一个方法最多只能有一个返回值，若没有返回值则用[void]关键词进行占位；返回值的类型可以是基础类型与类对象

几个常见的方法体写法
1、无参无返回值
```java
public void a(){
    //
}
```
2、有参（一个）无返回值
```java
public void a(int i){
    System.out.println(i);
}
```
3、有参（多个）无返回值
```java
public void a(int i, String str, float f, ...){
    System.out.println(i);
    System.out.println(str);
    System.out.println(f);
    ...
}
```
4、有参有返回值
```java
public int a(int i){
    return i + 1;
}
```

【基本数据类型】
java语言中有8种基本数据类型，分类四大类型：
* 逻辑类型：boolean
* 整数类型：byte、short、int、long
* 浮点类型 ：float、double
* 字符类型：char

## 逻辑类型：
* 常量：true、false
* 变量：使用关键字声明逻辑变量,若不赋初值默认为false    boolean ni=ture;

## 整数类型：
byte型：分配1字节内存，占8位.
* 变量：使用关键字byte来声明byte型变量。 例如：byte i=21;
short型：分配2字节内存，占16位.
* 变量：使用short关键字来声明short型变量。  例如：short sum=12;
(注：java中不存在byte 和short的常量表示法，但可以把不超出byte和short范围的int型常量赋给byte或short变量）
int型：分配4字节内存，占32位
* 变量：使用int关键字来声明int型变量  int t=9;
* 常量：123、3000（十进制）、045（八进制，0为前缀）、0x3ADB(十六进制，    0x为前缀）、二进制 0b110(用0b做前缀）
long型：分配8字节内存，占64位
* 常量：long型常量用后缀L来表示，例如782L
* 变量：使用long关键字来声明long型变量  long i=897L;

## 浮点类型：
float型：分配4字节，占32位，实际储存8位有效数字
* 常量：234.4f、32213.3F(常量后缀f、F必须存在，不可省）
* 变量：使用float关键字来声明float型变量  float ch=32.3f;
double型:分配8字节内存，占64位，实际储存16位有效数字
* 常量：324.9d、0.05
* 变量：使用double关键字来声明double型变量  double th=8.9;

## 字符类型：
char型：分配2字节内存，占16位，变量范围：0~65535
* 常量：'a'、'A'、'好'、'\n'  用单引号括上的Unicode中的一个字符
* 变量：使用char关键字来声明char型变量  char ch='你';

【String】
1. String表示字符串类型，属于 引用数据类型，不属于基本数据类型。
2. 在java中随便使用 双引号括起来 的都是String对象。
* 例如："abc"，"def"，"hello world!"，这是3个String对象。
3. java中规定，双引号括起来的字符串，是 不可变 的，也就是说"abc"自出生到最终死亡，不可变，不能变成"abcd"，也不能变成"ab"
4. 在JDK当中双引号括起来的字符串，例如："abc" "def"都是直接存储在“方法区”的“字符串常量池”当中的。
5. 为什么SUN公司把字符串存储在一个“字符串常量池”当中呢？
* 因为字符串在实际的开发中使用太频繁。为了执行效率，所以把字符串放到了方法区的字符串常量池当中。

【标识符与关键字】
## 标识符：
用来表示类名、变量名、数组名等有效字符序列称为标识符。
要求:
1. 标识符的第一个字符不能是数字字符
2. 标识符由数字、下划线、字母、美元符号组成
3. 标识符不能是关键字
4. 标识符不能是true、false、null
* 例子：dns_21、_we23、$987ewa  都是标识符

## 关键字（java中50个关键字)：
```kotlin
abstract 、assert 、boolean、break、byte、case、catch、char、class、const、continue、default 、do、double、else、enum、extends、final、finally、float、for、goto、if、implements、import、instanceof、int、interface、long、native、new、package、private、protected、public、return、short 、static、strictfp、super、switch、synchronized、this 、throw、throws、transient 、try 、void、volatile、while
```

【算术运算符】

基本四则运算符：+ - * / %

加法“+”：
```java
int a = 1 + 2; //等于3
double b = 1 + 2.5 //等于3.5
float c = 1 + 2.5f //等于3.5
```

减法“-”：
```java
int a = 3 - 1; //等于2
double b = 3 - 1.0; //等于2.0
float c = 3 - 1f //等于2.0
```

乘法“*”：
```java
int a = 1 * 2 //等于2
double b = 1 * 2.0 //等于2.0
float c = 1 * 2f //等于2.0
```

除法“/”：
```java
int a = 4 / 2; //等于2
double b = 4 / 2.0; //等于2.0
float c = 4 / 2f; //等于2.0
```

取余（取模）“%”：
```java
int a = 5 / 3; //5除以3等于1，余数为2，所以等于2
```

# 结论：
* % 表示取余，不仅对 int 可以取模，对double也可以
* 不能 %0

【复合运算符】

增值赋值运算符：不能运用在常量上

+= ： a += 1 → a = a + 1
-= ： a -= 1 → a = a - 1
*= ： a *= 2 → a = a * 2
/= ： a /= 2 → a = a / 2

【自增运算符】
value++、value--

```java
int a=5;
int b=++a;   // b为6
int a=5;
int c=a++;   // c为5，第二次调用时为6
int i=10;
i=i++;       // i为10，第二次调用时为11
```

【关系运算符】
关系运算符主要有6个： ==、!=、<、>、<=、>=
```java
int a=10;
int b=20;
System.out.println(a==b);   // false
System.out.println(a!=b);   // true
System.out.println(a<b);    // true
System.out.println(a>b);    // false
System.out.println(a<=b);   // true
System.out.println(a>=b);   // false
```
## 注意：
* 关系运算符的返回值都是boolean类型
* 关系运算符的表达式的结果只有两个值：true或者是false

【逻辑运算符】

逻辑运算符主要有三个：&&、||、!

# 逻辑与 &&
两个表达式都为true，结果为true，否则结果为false

```java
int a=1;
int b=2;
int c=3;
System.out.println(a<b && b<c);
//结果为： true
```

# 逻辑或 ||
两个表达式都为false，结果为false，否则结果为true
```java
int a=1;
int b=2;
int c=3;
System.out.println(a<b || b<c);
// 结果为： true
```

# 逻辑非 !
表达式为false，结果为true；表达式为true，结果为false
Java中， " ! "只能作用于boolean类型
```java
int a=1;
int b=2;
System.out.println(!(a<b));
```

# 短路求值
&& 和 || 遵循短路求值原则
```java
System.out.println( 10>20 && 10/0==0 );   //false
System.out.println( 10<20 || 10/0==0 );   //true
```

# 结论：
* 对于&&，若左侧表达式为false，则结果一定为false，无需考虑右侧表达式
* 对于| |，若左侧表达式为true，则结果一定为true，无需考虑右侧表达式
* & 和 | (不推荐使用) ，若表达式结果为boolean时，也表示逻辑运算，但它不支持短路求值

【位运算符】

* 位运算符主要有4个：&、|、~、^

要想进行位运算，先得求出一个数的二进制:

<img src="https://img-blog.csdnimg.cn/f43279aac46047f4a68fa5a6a98a5246.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_5LiA5py16Iqx6IqxCg==,size_16,color_FFFFFF,t_70#pic_center" />

# 按位与 &
若两个二进制位都为1，结果为1，否则为0

<img src="https://img-blog.csdnimg.cn/c9b58ec903ce4640ba40e27ad05d6ac8.jpg#pic_center" />

# 按位或 |
若两个二进制位都为0，结果为0，否则为1

<img src="https://img-blog.csdnimg.cn/5c3892b78e4e4458a851f0bf46863d5d.jpg#pic_center" />

# 按位取反 ~
若该位为0，则结果为1，若该位为1，则结果为0

# 按位异或 ^
如果两个数的二进制位相同,结果为 0， 相异结果为 1

# 注意：
* 当 & 和 | 的操作数为整数(int, short, long, byte) 的时候，表示按位运算，当操作数为 boolean 的时候，表示逻辑运算
* 0x 前缀的数字为 十六进制 数字，十六进制可以看成是二进制的简化表示方式，一个十六进制数字对应 4 个二进制位.
* printf 能够格式化输出内容，%x 表示按照十六进制输出

【移位运算符】

* 移位运算符有三个：<<，>>，>>>，都是按照二进制比特位来进行运算的

# 左移 <<
最左侧位不要了，最右侧补0 左移补0就行

<img src="https://img-blog.csdnimg.cn/56886b191d9d4de98e6edd8665ee7d25.jpg#pic_center" />

# 右移 >>
最右侧位不要了，最左侧补符号位，右移补符号位

<img src="https://img-blog.csdnimg.cn/3013aa3c74104b0384b77eba9faf8cd4.jpg#pic_center" />

# 无符号右移 >>>
Java中独特的移位运算符
最右侧位不要了，最左侧补0，只补0

<img src="https://img-blog.csdnimg.cn/33ff473430294248b01c8232079009dc.jpg#pic_center" />

# 结论：
* 左移相当于乘法，左移 N 位，相当于原数字 * 2 的N次方
* 右移相当于除法，右移 N 位，相当于原数字 / 2 的N次方
* 移动负数位或者移位位数过大都没有意义
* 位运算速度高于乘除运算


【if语句】
# 概念
if语句是单条件分支语句，即根据一个条件来控制程序执行。

语法格式
```java
if (比较表达式) {
    语句体;
}
```
# 执行流程
先计算比较表达式的值，看其返回值是true还是false，如果是true,就执行语句体；如果是false，就不执行语句体

# 注意事项
比较表达式无论简单还是复杂，结果必须是boolean类型。if语句中的{}可以省略不写，但为了增强程序的可读性，最好不要省略。

【if-else语句】

# 概念
if-else是单条件分支语句，即根据一个条件来控制程序执行。

语法格式
```java
if (比较表达式) {
    语句体1;
} else {
    语句体2;
}

# 执行流程
先计算表达式的值，看其返回值是true还是false，如果是true，就执行语句体1；如果是false，就执行语句体2

【if-else if-else语句（级联语句）】

# 概念
if-else if-else语句是多条件分支的语句

语法格式
```java
if (比较表达式1) {
    语句体1;
} else if (比较表达式2) {
    语句体2;
} else if (比较表达式3) {
    语句体3;
}
…
else{
    语句体n+1;
}
```

# 执行流程
先计算比较表达式1，看其返回值是true还是false，如果是true,则执行语句体1，if语句结束；如果是false,接着计算比较表达式2，看其返回值是true还是false，如果是true，就执行语句体2，if语句结束，如果是false，接着计算比较表达式3，看其返回值是true还是false；如果都是false，就执行语句n+1

【三元运算符】

# 概念
如名字表示的三元运算符需要三个操作数。

## 语法：
条件表达式?表达式1:表达式2。

* 说明：问号前面的位置是判断的条件，判断结果为bool型，为true时调用表达式1，为false时调用表达式2。其逻辑为：“如果条件表达式成立或者满足则执行表达式1，否则执行第二个。”常用在设置默认值,例如某个值不一定存在,则判断这个值是否存在,不存在给默认值(表达式2)。

```java
/*
    三元运算符
    格式：
        关系表达式 ？ 表达式1 : 表达式2;
    范例：
        a > b ? a : b;
    执行流程：
        首先计算关系表达式的值
        如果值为true，表达式1就是运算结果
        如果值为false，表达式2位运算结果

*/
public class SanYuan {
    public static void main(String[] args) {
        // 定义两个变量
        int a = 10;
        int b = 20;

        // 获取两个数中的较大值
        int max = a > b ? a : b;

        // 输出结果
        System.out.println("max:" + max);
    }
}

```

<img src="https://img-blog.csdnimg.cn/8d9e4362672042f48b4fc7f2f133231e.png" />



【while循环语句】
while语句的循环方式是通过一个条件来控制是否要继续反复执行这个语句。

语法如下:
```java
while(条件表达式){
	执行语句
}

```
当条件表达式的返回值为真时，则执行{}中的语句，当执行完{}中的语句后，重新判断条件表达式的返回值，直到表达式返回的结果为假时，退出循环。

示例：

<img src="https://img-blog.csdnimg.cn/20210131202003456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjEwMTgzOQ==,size_16,color_FFFFFF,t_70" />

【do…while循环语句】
do…while循环语句和while循环语句类似，它们的区别就是while语句是先判断条件是否成立，然后执行{}，do…while循环语句则先执行一次循环后，再判断条件是否成立。也就是do…while当中的{}代码是至少执行一次的。

语法如下:
```java
do{
	执行语句
}
while(条件表达式);
```
do…while语句和while语句的一个明显区别就是do…while结尾处多了一个分号。

示例：

<img src="https://img-blog.csdnimg.cn/20210131202553303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjEwMTgzOQ==,size_16,color_FFFFFF,t_70" />

【for循环语句】
for循环可以用来重复执行某条语句，直到条件某个条件得到满足。

语法如下:
```java
for(表达式1;表达式2;表达式3){
	语句
}
```
表达式1：通常是一个赋值表达式，负责设置循环的起始值，也就是给控制循环的变量赋值。

表达式2：通常是一个关系表达式，用控制循环的变量和循环变量允许的范围值比较。

表达式3: 通常是一个赋值表达式，对控制循环的变量进行增大或减小。

示例：

<img src="https://img-blog.csdnimg.cn/20210131203036967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjEwMTgzOQ==,size_16,color_FFFFFF,t_70" />

【foreach语句】

foreach语句是for语句的特殊简化版本，但是foreach并不能完全取代for语句，不是任何foreach语句都可以改为for语句版本，
foreach语句在遍历数组等方面很方便。

语法如下:
```java
for(循环变量x: 遍历对象obj){
	应用了x的java语句
}
```

遍历对象obj:依次读取obj中元素的值。
循环变量x:将obj遍历读取出的值赋给x。

示例：

<img src="https://img-blog.csdnimg.cn/20210131203419111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjEwMTgzOQ==,size_16,color_FFFFFF,t_70" />

【break】
使用break语句可以跳出switch结构。在循环结构中同样用break可以跳出当前循环体。

<img src="https://img-blog.csdnimg.cn/20210131205351747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjEwMTgzOQ==,size_16,color_FFFFFF,t_70" />

以上只是单层循环使用，对于多层循环，只想跳出一层的时候，break还以指定循环来跳出。

语法如下:
```java
标签名: 循环体{
	break 标签名;
}
```

示例：

<img src="https://img-blog.csdnimg.cn/20210131210143540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjEwMTgzOQ==,size_16,color_FFFFFF,t_70" />

【continue】

continue语句是针对break语句的补充。continue不是跳出循环体，而是跳过本次循环结束前的语句，回到循环条件测试部分，重新开始执行循环。

<img src="https://img-blog.csdnimg.cn/20210131210529384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjEwMTgzOQ==,size_16,color_FFFFFF,t_70" />

与break一样，continue也支持标签功能，主要对于多层循环的时候使用。

语法如下:
```java
标签名 : 循环体{
	continue 标签名;
}

```


【数组】
## 数组的定义
数组是相同类型数据的有序集合。其中，每一个数据称作一个元素，每个元素可以通过一个 索引（下标）来访问它们

## 数组的四个特点
1. 长度是确定的。数组一旦被创建，它的大小就是不可以改变的。
2. 其元素的类型必须是相同类型，不允许出现混合类型。
3. 数组类型可以是任何数据类型，包括基本类型和引用类型。
4. 数组变量属于引用类型，数组也是对象,数组中的元素相当于对象的属性！

<img src="https://img-blog.csdnimg.cn/662fe6c4b2f24f3cb2e256ad40f14b4d.png#pic_center"/>

数组的创建，数组的声明方式（以一维数组为例）
```java
type[] arr_name; //方式一
type arr_name[]; //方式二
```
### 注意：
声明的时候并没有实例化任何对象，只有在实例化数组对象时，JVM 才分配空间，这时 才与长度有关。声明一个数组的时候并没有数组真正被创建。构造一个数组，必须指定长度。

* 示例：创建基本类型一维数组
```java
public class Test {
	public static void main(String args[]) {
		int[] s; // 声明数组；
		s = new int[10]; // 给数组分配空间；
		for (int i = 0; i < 10; i++) {
			s[i] = 2 * i + 1;//给数组元素赋值；数组是对象，数组中的元素就是对象的属性
			System.out.println(s[i]);
		}
	}
}
```

<img src="https://img-blog.csdnimg.cn/0528322648fe4b6b9d73f22839726e3f.png#pic_center" />

* 示例：创建引用类型一维数组
```java
class Man{
	private int age;
	private int id;
	public Man(int id,int age) {
	super();
	this.age = age;
	this.id = id;
	}
}

public class AppMain {
	public static void main(String[] args) {
		Man[] mans; //声明引用类型数组
		mans = new Man[10]; //给引用类型数组分配空间

		Man m1 = new Man(1,11);
		Man m2 = new Man(2,22);

    	mans[0]=m1;//给引用类型数组元素赋值
		mans[1]=m2;//给引用类型数组元素赋值
	}
}
```

<img src="https://img-blog.csdnimg.cn/08e92eca57e44aeda04a3d2b9b089d78.png#pic_center" />

## 数组的三种初始化方式
数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。

### 静态初始化
除了用 new 关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配 空间并赋值。

* 示例：数组的静态初始化

```java
int [] a = { 1, 2, 3 };// 静态初始化基本类型数组；
Man[] mans = { new Man(1, 1), new Man(2, 2) };// 静态初始化引用类型数组；
```

### 动态初始化
数组定义与为数组元素分配空间并赋值的操作分开进行。

* 示例：数组的动态初始化
```java
int[ ] a1 = new int[2];//动态初始化数组，先分配空间；
a1[0]=1;//给数组元素赋值；
a1[1]=2;//给数组元素赋值；
```

### 默认初始化
数组是对象，它的元素相当于对象的属性；每个元素也按照属性的方式被默认初始化。

* 示例：数组的默认初始化
```java
int a2[ ] = new int[2]; // 默认值：0, 0
boolean[ ] b = new boolean[2]; // 默认值：false, false
String[ ] s = new String[2]; // 默认值：null, null
```

【二维数组】
### 二维数组的本质
本质就是存放了一维数组的数组
格式1:
数据类型[] 数组名 = new 数据类型[数组的长度];
数据类型[][] 数组名 = new 数据类型[m][n]; m: 二维数组中一维数组的长度
n: 每一个一维数组中元素的个数

int[][] arr = new int[3][2];
表示arr中有3个一维数组,每一个一维数组有2个元素

变式:
数据类型 数组名[][] = new 数据类型[m][n]; 数据类型[] 数组名[] = new 数据类型[m][n];

格式2:
数组类型[][] 数组名 = new 数据类型[m][];
m: 二维数组中一维数组的长度
n: m必不可少,n可省略,表示每一个一维数组的元素个数不确定
可以后期动态地改变每一个一维数组元素的个数

```java
int[][] arr = new int[3][2];
		System.out.println(arr); // 地址 [[I@7852e922

		System.out.println(arr[0]); // 地址 [I@4e25154f
		System.out.println(arr[1]); // 地址 [I@70dea4e
		System.out.println(arr[2]); // 地址 [I@5c647e05
//		System.out.println(arr[3]); // 数组越界

		System.out.println(arr[0][0]); // 0
		System.out.println(arr[0][1]); // 0
		System.out.println(arr[1][0]); // 0
//		System.out.println(arr[1][2]); // 数组越界
```

【集合】
# java集合简介
集合类是Java数据结构的实现。Java的集合类是java.util包中的重要内容，它允许以各种方式将元素分组，并定义了各种使这些元素更容易操作的方法。Java集合类是Java将一些基本的和使用频率极高的基础类进行封装和增强后再以一个类的形式提供。集合类是可以往里面保存多个对象的类，存放的是对象，不同的集合类有不同的功能和特点，适合不同的场合，用以解决一些实际问题。

# 集合分类
Java中的集合类可以分为两大类：

A、类是实现Collection接口：
Collection是一个基本的集合接口，Collection中可以容纳一组集合元素（Element），Collection有两个重要的子接口List和Set*。List表达一个有序的集合，List中的每个元素都有索引，使用此接口能够准确的控制每个元素插入的位置。用户也能够使用索引来访问List中的元素，List类似于Java的数组。Set接口的特点是不能包含重复的元素。对Set中任意的两个元素element1和element2都有elementl.equals（element2）= false。另外，Set最多有一个null元素。此接口模仿了数学上的集合概念。

B、类是实现Map接口：
Map没有继承Collection接口，与Collection是并列关系。Map提供键（key）到值（value）的映射。一个Map中不能包含相同的键，每个键只能映射一个值。

Collection接口、List接口、Set接口以及相关类的关系如图1所示。
图1如下：

<img src="https://img-blog.csdnimg.cn/3b10ee9e58114fc69b7ba6f38619e7f6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Iqx5byA5pyJ5pe26YeN6YCi5peg5pyf,size_20,color_FFFFFF,t_70,g_se,x_16" />

Map接口与Collection接口不同，Map提供键到值的映射。Map接口提供三种Collection视图，允许以键集、值集或键一值映射关系集的形式查看某个映射的内容。Map接口及其相关类的关系如图2所示

<img src="https://img-blog.csdnimg.cn/48e68aee4d484e399657147e8f200aca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Iqx5byA5pyJ5pe26YeN6YCi5peg5pyf,size_17,color_FFFFFF,t_70,g_se,x_16" />

# 集合的特点和好处

## 集合类的特点有三个：
1. 集合类这种框架是高性能的。对基本类集（动态数组，链接表，树和散列表）的实现是高效率的。一般人很少去改动这些已经很成熟并且高效的APl；
2. 集合类允许不同类型的集合以相同的方式和高度互操作方式工作；
3. 集合类容易扩展和修改，可以很容易地稍加改造就能满足自己的数据结构需求。

## 集合类带来的好处：
1. 降低编程难度：在编程中会经常需要链表、向量等集合类，如果自己动手写代码实现这些类，需要花费较多的时间和精力。调用Java中提供的这些接口和类，可以很容易的处理数据。
2. 提升程序的运行速度和质量：Java提供的集合类具有较高的质量，运行时速度也较快。使用这些集合类提供的数据结构，程序员可以从“重复造轮子”中解脱出来，将精力专注于提升程序的质量和性能。
3. 无需再学习新的APl：借助泛型，只要了解了这些类的使用方法，就可以将它们应用到很多数据类型中。如果知道了LinkedList的使用方法，也会知道LinkedList怎么用，则无需为每一种数据类型学习不同的API。
4. 增加代码重用性：也是借助泛型，就算对集合类中的元素类型进行了修改，集合类相关的代码也几乎不用修改。

# 集合的基础用法及其特性

## Collection接口下的List接口
```java
 //List集合常用方法
    public static void main (String[] args) {
        //集合的声明可以是各种类型不同的对象 这里用String对象来做演示
        List<String> strList = new ArrayList<String>();
        //集合新增一个元素
        strList.add("1");
        strList.add("2");
        strList.add("3");
        strList.add("1");
        System.out.println("打印集合strList中的元素=============" + strList.toString());
        //集合删除一个元素 remove有多种用法 这里调用的是按下标删除集合元素的方法还可以按对象进行删除
        strList.remove(3);
        System.out.println("打印集合strList删除3后剩余的元素============" + strList.toString());
        if(strList.contains("2")){
            System.out.println("集合strList包含元素================   2");
        }
    }
```

<img src="https://img-blog.csdnimg.cn/90e2bd8a263e41678741a63d2bb8921f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Iqx5byA5pyJ5pe26YeN6YCi5peg5pyf,size_13,color_FFFFFF,t_70,g_se,x_16" />

## Collection接口下的set接口
```java
//Set集合常用方法
    public static void main (String[] args) {
        //集合的声明可以是各种类型不同的对象 这里用String对象来做演示
        Set<String> strSet = new TreeSet<String>();
        //集合新增一个元素
        strSet.add("1");
        strSet.add("2");
        strSet.add("3");
        strSet.add("1");
        System.out.println("打印集合strSet中的元素=============" + strSet.toString());
        //集合删除一个元素 remove有多种用法 这里调用的是按下标删除集合元素的方法
        strSet.remove("3");
        System.out.println("打印集合strSet删除3后剩余的元素============" + strSet.toString());
        if(strSet.contains("2")){
            System.out.println("集合strSet包含元素================   2");
        }
    }
```

<img src="https://img-blog.csdnimg.cn/7575f1a697894c2da56cf8b899604ced.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Iqx5byA5pyJ5pe26YeN6YCi5peg5pyf,size_20,color_FFFFFF,t_70,g_se,x_16" />

## Map接口下的常用接口
```java
public static void main(String[] args) {
        //这里拿HashMap集合 和 String对象来做演示
        Map<String,String> map = new HashMap<>();
        //Map集合新增一个元素  这里二个值风别对应Map集合声明时定义的二个类型，这里定义的是String，String
        map.put("name","测试HashMap");
        map.put("sex","男");
        map.put("age","20");
        map.put("sex","女");
        //这里提示下Map集合更多时候是当作一个不确定类型的类去使用的
        System.out.println("map============："+map.toString());
        //map的get方法 通过key 获取  value
        System.out.println("map的get方法=============="+map.get("name"));
        //map的remove方法 通过 key 删除 这个key和value 还一种删除方法是 map.remove("sex","男")
        System.out.println("map的remove方法=============="+map.remove("age"));
        System.out.println("map============："+map.toString());
        //map的包含方法有二种，第一种 对key进行包含  第二种对value进行包含map.containsValue("男")
        if(map.containsKey("sex")){
            System.out.println("map集合包含key的属性名称sex");
        }
    }
```

<img src="https://img-blog.csdnimg.cn/2cd0b872b1274679bab2c33ac77b6c01.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Iqx5byA5pyJ5pe26YeN6YCi5peg5pyf,size_19,color_FFFFFF,t_70,g_se,x_16" />

如上图，如果key重复的话会被后面相同的key进行覆盖。

# 不同接口下的集合特性

## A、List集合特性
### ArrayList
默认的构造方法是创建一个初始容量为10的空数组，扩容机制：1.5倍
基于数组实现的，查询快，增删慢，线程不安全，效率高，可存储重复元素

### LinkedList
基于链表（双向链表）实现的，查询慢，增删快，线程不安全，效率高，可以存储重复元素
特有的方法：addFirst()，addLast()，removeFirst()，removeLast()，getFirst()，getLast()

### Vector
基于数组实现的，查询慢，增删快，线程安全，效率低
特有方法：addElement()（相当于add），elementAt()（相当于get）

#### ArrayList、LinkedList、Vector的区别：
ArrayList扩容后的容量是之前的1.5倍，然后把之前的数据拷贝到新建的数组中去。而Vector默认情况下扩容后的容量是之前的2倍。Vector可以设置容量增量，而ArrayList不可以。扩容与capacityIncrement（容量增量）参数相关，若此参数大于0，则按该值扩增容量，否则，成倍扩增

## B、Set集合特性
### HashSet
按照Hash算法来存储集合中的元素，根据对象的哈希码确定对象的存储位置，具有良好的存取和查找性能。
元素无序且唯一，线程不安全，效率高，可以存储null元素，元素的唯一性是靠所存储元素类型是否重写hashCode()和equals()方法来保证的，如果没有重写这两个方法，则无法保证元素的唯一性。
实现唯一性的过程：
存储元素首先会使用hash()算法函数生成一个int类型hashCode散列值，然后已经的所存储的元素的hashCode值比较，如果hashCode不相等，则所存储的两个对象一定不相等，此时存储当前的新的hashCode值处的元素对象；如果hashCode相等，存储元素的对象还是不一定相等，此时会调用equals()方法判断两个对象的内容是否相等，如果内容相等，那么就是同一个对象，无需存储；如果比较的内容不相等，那么就是不同的对象，就该存储了
HashSet中的元素是不重复的， HashSet采用哈希算法，底层用数组存储数据。默认初始化容量16，加载因子0.75。

### LinkedHashSet
底层数据结构采用链表和哈希表共同实现，链表保证了元素的顺序与存储顺序一致，哈希表保证了元素的唯一性。线程不安全，效率高。
根据元素hashCode值来决定元素存储位置，但它同时使用链表维护元素的次序，这样使得元素看起来是以插入的顺序保存的。

### TreeSet
TreeSet集合中的元素处于排序状态，主要按照红黑树的数据结构来存储对象
TreeSet根据元素的实际大小进行排序，不同于List是按照元素插入顺序进行排序。

## C、Map集合特性
Map 没有继承 Collection 接口， Map 提供 key 到 value 的映射，你可以通过“键”查找“值”。
一个 Map 中不能包含相同的 key ，每个 key 只能映射一个 value

## HashMap
HashMap 最多只允许一条记录的键为 null，允许多条记录的值为 null。
HashMap 根据键的 hashCode 值存储数据，大多数情况下可以直接定位到它的值，因而具有很快
的访问速度，但遍历顺序却是不确定的。
HashMap 非线程安全，即任一时刻可以有多个线程同时写 HashMap，可能会导
致数据的不一致。如果需要满足线程安全，可以用 Collections 的 synchronizedMap 方法使
HashMap 具有线程安全的能力，或者使用 ConcurrentHashMap。

## HashTable
HashTable是同步的，这个类中的方法中添加了synchronized关键字，保证了HashTable是线程安全的
HashTable不能存放空值，性能较差
Hashtable 不建议在新代码中使用，不需要线程安全的场合可以用 HashMap 替换，需要线程安全的场合可以用 ConcurrentHashMap 替换

## TreeMap
TreeMap 实现 SortedMap 接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。
如果使用排序的映射，建议使用 TreeMap。
在使用 TreeMap 时， key 必须实现 Comparable 接口或者在构造 TreeMap 传入自定义的Comparator，否则会在运行时抛出 java.lang.ClassCastException 类型的异常。
## LinkedHashMap
使用双向链表来维护键值对的次序
LinkedHashMap 是 HashMap 的一个子类，保存了记录的插入顺序，在用 Iterator 遍历LinkedHashMap 时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。

# 集合常用的循环遍历方法

## A、List接口常用循环遍历方法
```java
//List集合常用的循环遍历方法
    public static void main(String[] args) {
        List<String> strList = new ArrayList<>();
        strList.add("1");strList.add("5");strList.add("6");strList.add("3");strList.add("2");strList.add("51");

        System.out.println("第一种、for循环遍历：");
        for(int i = 0,size = strList.size() ; i < size ; i++){
            System.out.print(strList.get(i) +"   ");
        }

        System.out.println();
        System.out.println("第二种、使用foreach遍历List：");
        for(String str : strList){
            System.out.print(str +"   ");
        }

        System.out.println();
        System.out.println("第三种、使用迭代器进行遍历：");
        Iterator<String> iterator = strList.iterator();
        while (iterator.hasNext()){
            String str = iterator.next();
            System.out.print(str +"   ");
        }

        System.out.println();
        System.out.println("第四种、java1.8新特性进行遍历：");
        strList.forEach(str ->{
            System.out.print(str +"   ");
        });
    }

```

<img src="https://img-blog.csdnimg.cn/559bf4af40c44269a28ad1e971cbf860.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Iqx5byA5pyJ5pe26YeN6YCi5peg5pyf,size_18,color_FFFFFF,t_70,g_se,x_16" />

## B、Set接口常用循环遍历方法
这里注意Set集合没有get方法如果想去某个值需要进行数组或其它集合转换。
```java
//Set集合常用的循环遍历方法
    public static void main(String[] args) {
        Set<String> strSet = new TreeSet<>();
        strSet.add("1");strSet.add("5");strSet.add("6");strSet.add("3");strSet.add("2");strSet.add("51");

        System.out.println("第一种、使用foreach遍历List：");
        for(String str : strSet){
            System.out.print(str +"   ");
        }

        System.out.println();
        System.out.println("第二种、使用迭代器进行遍历：");
        Iterator<String> iterator = strSet.iterator();
        while (iterator.hasNext()){
            String str = iterator.next();
            System.out.print(str +"   ");
        }

        System.out.println();
        System.out.println("第三种、java1.8新特性进行遍历：");
        strSet.forEach(str ->{
            System.out.print(str +"   ");
        });
    }

```

<img src="https://img-blog.csdnimg.cn/a6886d5bc79547fda1537a95e4d42ec1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Iqx5byA5pyJ5pe26YeN6YCi5peg5pyf,size_20,color_FFFFFF,t_70,g_se,x_16" />

## C、Map接口常用循环遍历方法

```java
//Map集合常用的循环遍历方法
    public static void main(String[] args) {
        Map<String,String> map = new HashMap<>();
        map.put("name","测试map遍历");
        map.put("age","22");
        map.put("sex","男");

        //map集合第一种遍历方法
        System.out.println("第一种、map集合遍历方法：");
        for (String str : map.keySet()){
            System.out.print(str+"  :  "+map.get(str)+"  ");
        }

        //map集合第二种遍历方法
        System.out.println();
        System.out.println("第二种、map集合遍历方法：");
        for(Map.Entry<String,String> entry : map.entrySet()){
            System.out.print(entry.getKey()+"  :  "+entry.getValue());
        }

        //map集合第二种遍历方法
        System.out.println();
        System.out.println("第三种、map集合遍历方法：");
        Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator();
        while (iterator.hasNext()){
            Map.Entry<String, String> entry = iterator.next();
            System.out.print(entry.getKey()+"  :  "+entry.getValue());
        }
    }

```

<img src="https://img-blog.csdnimg.cn/73cdba7da549481396e85b28568837fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Iqx5byA5pyJ5pe26YeN6YCi5peg5pyf,size_15,color_FFFFFF,t_70,g_se,x_16" />

<font color="gray">本内容来自<a href="http://t.csdn.cn/8rtQq">CSDN博客</a></font>

【未完待续】
下期内容：面向对象编程